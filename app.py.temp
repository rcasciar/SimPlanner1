"""
SimPlanner - Sistema Avanzato di Programmazione Laboratori

Applicazione Streamlit per gestire la programmazione di laboratori didattici
per studenti, con generazione di gruppi, calendarizzazione e visualizzazione avanzata.
"""
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import io
import os
import re
import json
from io import BytesIO
import tempfile
import openpyxl

# Importa moduli personalizzati
from ui_components import (create_navbar, section_header, create_preview_card, 
                          show_toast_notification, add_shortcut_buttons,
                          create_compact_mode_toggle, load_css_animation,
                          get_download_link, display_event_log, create_tutorial_steps,
                          log_event, get_event_log)
from pdf_export import export_schedule_pdf_weasyprint, export_schedule_pdf_reportlab
from valutazione import valutazione_interface

# Configurazione pagina
st.set_page_config(
    page_title="SimPlanner",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carica CSS e animazioni
load_css_animation()

# Verifica se esistono le cartelle necessarie
if not os.path.exists('temp_files'):
    os.makedirs('temp_files')
if not os.path.exists('export'):
    os.makedirs('export')

# Funzioni di utilit√†
def leggi_excel_studenti(file_content):
    """Legge un file Excel con elenco studenti"""
    try:
        df = pd.read_excel(file_content)
        return df
    except Exception as e:
        st.error(f"Errore nella lettura del file Excel: {str(e)}")
        return None

def salva_dati_sessione():
    """Salva i dati della sessione in un file temporaneo"""
    dati_sessione = {
        "studenti": st.session_state.get("studenti", []),
        "laboratori": st.session_state.get("laboratori", []),
        "aule": st.session_state.get("aule", []),
        "date": {
            "inizio": st.session_state.get("data_inizio", ""),
            "fine": st.session_state.get("data_fine", "")
        },
        "gruppi_standard": st.session_state.get("gruppi_standard", {}),
        "gruppi_ridotti": st.session_state.get("gruppi_ridotti", {}),
        "programmazione": st.session_state.get("programmazione", [])
    }
    
    try:
        with open('temp_files/sessione.json', 'w', encoding='utf-8') as f:
            json.dump(dati_sessione, f, ensure_ascii=False, indent=4, default=str)
        return True
    except Exception as e:
        st.error(f"Errore nel salvataggio dei dati: {str(e)}")
        return False

def normalizza_fasce_orarie(lab):
    """Normalizza le fasce orarie in un laboratorio per garantire la compatibilit√†"""
    if "fasce_orarie_disponibili" in lab:
        fasce_normalizzate = []
        for fascia in lab["fasce_orarie_disponibili"]:
            # Converti "11:00-13:30" in "11:10-13:30" per retrocompatibilit√†
            if fascia == "11:00-13:30":
                fasce_normalizzate.append("11:10-13:30")
            else:
                fasce_normalizzate.append(fascia)
        lab["fasce_orarie_disponibili"] = fasce_normalizzate
    return lab

def carica_dati_sessione():
    """Carica i dati della sessione da un file temporaneo"""
    try:
        if os.path.exists('temp_files/sessione.json'):
            with open('temp_files/sessione.json', 'r', encoding='utf-8') as f:
                dati = json.load(f)
                
            # Ripristina gli stati della sessione
            if "studenti" in dati and isinstance(dati["studenti"], list):
                st.session_state.studenti = dati["studenti"]
            if "laboratori" in dati and isinstance(dati["laboratori"], list):
                # Normalizza le fasce orarie nei laboratori esistenti per compatibilit√†
                st.session_state.laboratori = [normalizza_fasce_orarie(lab) for lab in dati["laboratori"]]
            if "aule" in dati and isinstance(dati["aule"], list):
                st.session_state.aule = dati["aule"]
            if "date" in dati and isinstance(dati["date"], dict):
                st.session_state.data_inizio = dati["date"].get("inizio", "")
                st.session_state.data_fine = dati["date"].get("fine", "")
            if "gruppi_standard" in dati and isinstance(dati["gruppi_standard"], dict):
                st.session_state.gruppi_standard = dati["gruppi_standard"]
            if "gruppi_ridotti" in dati and isinstance(dati["gruppi_ridotti"], dict):
                st.session_state.gruppi_ridotti = dati["gruppi_ridotti"]
            if "programmazione" in dati and isinstance(dati["programmazione"], list):
                st.session_state.programmazione = dati["programmazione"]
    except Exception as e:
        st.error(f"Errore nel caricamento dei dati: {str(e)}")

def converti_data_italiana(data_str):
    """Converte una data dal formato italiano (gg/mm/aaaa) a oggetto datetime"""
    try:
        if data_str and isinstance(data_str, str):
            return datetime.strptime(data_str, "%d/%m/%Y")
        return None
    except Exception:
        return None

def crea_giorni_lavorativi(data_inizio, data_fine):
    """Crea un elenco di date lavorative (luned√¨-venerd√¨) tra due date"""
    giorni = []
    
    # Verifica che le date siano oggetti datetime, altrimenti convertile
    if isinstance(data_inizio, str):
        data_inizio = converti_data_italiana(data_inizio)
    if isinstance(data_fine, str):
        data_fine = converti_data_italiana(data_fine)
    
    # Se una delle date non √® valida, restituisci lista vuota
    if not data_inizio or not data_fine:
        return []
    
    data_corrente = data_inizio
    
    while data_corrente <= data_fine:
        # 0 = luned√¨, 6 = domenica
        if data_corrente.weekday() < 5:  # Luned√¨-Venerd√¨
            giorni.append(data_corrente)
        data_corrente += timedelta(days=1)
    
    return giorni

def calcola_fascia_oraria(ora_inizio, durata_minuti):
    """Calcola la fascia oraria di fine dato orario inizio e durata in minuti"""
    ora_inizio_dt = datetime.strptime(ora_inizio, "%H:%M")
    ora_fine_dt = ora_inizio_dt + timedelta(minutes=durata_minuti)
    return ora_fine_dt.strftime("%H:%M")

def converti_a_excel(df):
    """Converte un DataFrame in file Excel"""
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='openpyxl')
    df.to_excel(writer, index=False, sheet_name='Programmazione')
    writer.close()
    return output.getvalue()

# Verifica se esistono le variabili di stato della sessione necessarie
if 'sezione_corrente' not in st.session_state:
    st.session_state.sezione_corrente = 'Home'

if 'studenti' not in st.session_state:
    st.session_state.studenti = []

if 'laboratori' not in st.session_state:
    st.session_state.laboratori = []

if 'aule' not in st.session_state:
    st.session_state.aule = []

if 'data_inizio' not in st.session_state:
    st.session_state.data_inizio = ""

if 'data_fine' not in st.session_state:
    st.session_state.data_fine = ""

if 'gruppi_standard' not in st.session_state:
    st.session_state.gruppi_standard = {}

if 'gruppi_ridotti' not in st.session_state:
    st.session_state.gruppi_ridotti = {}

if 'programmazione' not in st.session_state:
    st.session_state.programmazione = []

# Funzioni per cambiare sezione
def vai_a_sezione(sezione):
    st.session_state.sezione_corrente = sezione
    salva_dati_sessione()

# Carica i dati salvati quando l'app viene avviata
carica_dati_sessione()

# Interfaccia utente
st.title("Sistema di Programmazione Laboratori")

# Barra di navigazione
col1, col2, col3, col4, col5, col6, col7 = st.columns(7)
with col1:
    st.button("Home", on_click=vai_a_sezione, args=('Home',), use_container_width=True)
with col2:
    st.button("Elenco Studenti", on_click=vai_a_sezione, args=('Elenco Studenti',), use_container_width=True)
with col3:
    st.button("Generazione Gruppi", on_click=vai_a_sezione, args=('Generazione Gruppi',), use_container_width=True)
with col4:
    st.button("Aule", on_click=vai_a_sezione, args=('Aule',), use_container_width=True)
with col5:
    st.button("Date Inizio/Fine", on_click=vai_a_sezione, args=('Date',), use_container_width=True)
with col6:
    st.button("Programmazione", on_click=vai_a_sezione, args=('Programmazione',), use_container_width=True)
with col7:
    st.button("Valutazione", on_click=vai_a_sezione, args=('Valutazione',), use_container_width=True)

st.divider()

# Contenuto principale in base alla sezione selezionata
if st.session_state.sezione_corrente == 'Home':
    st.header("Benvenuto nel Sistema di Programmazione Laboratori")
    
    st.write("""
    Questo sistema ti permette di gestire la programmazione dei laboratori didattici.
    
    Ecco le sezioni disponibili:
    
    1. **Elenco Studenti**: Gestisci l'elenco degli studenti
    2. **Generazione Gruppi**: Crea e gestisci i gruppi di studenti per i laboratori
    3. **Aule**: Gestisci le aule disponibili e la loro capacit√†
    4. **Date Inizio/Fine**: Imposta il periodo di programmazione
    5. **Programmazione**: Visualizza e modifica la programmazione dei laboratori
    
    Inizia selezionando una delle sezioni dalla barra di navigazione.
    """)
    
    # Riepilogo
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Riepilogo Dati")
        st.write(f"Studenti: {len(st.session_state.studenti)}")
        st.write(f"Laboratori: {len(st.session_state.laboratori)}")
        st.write(f"Aule: {len(st.session_state.aule)}")
        
        if st.session_state.data_inizio and st.session_state.data_fine:
            data_inizio = converti_data_italiana(st.session_state.data_inizio)
            data_fine = converti_data_italiana(st.session_state.data_fine)
            if data_inizio and data_fine:
                giorni_lavorativi = crea_giorni_lavorativi(data_inizio, data_fine)
                st.write(f"Periodo: dal {st.session_state.data_inizio} al {st.session_state.data_fine}")
                st.write(f"Giorni lavorativi: {len(giorni_lavorativi)}")
    
    with col2:
        st.subheader("Statistiche Gruppi")
        n_gruppi_standard = len(st.session_state.gruppi_standard.keys())
        n_gruppi_ridotti = len(st.session_state.gruppi_ridotti.keys())
        
        st.write(f"Gruppi Standard: {n_gruppi_standard}")
        st.write(f"Gruppi a Capacit√† Ridotta: {n_gruppi_ridotti}")
        
        st.write(f"Eventi programmati: {len(st.session_state.programmazione)}")

elif st.session_state.sezione_corrente == 'Elenco Studenti':
    st.header("Gestione Elenco Studenti")
    
    # Opzione per caricare da Excel o inserire manualmente
    caricamento = st.radio("Scegli modalit√† di inserimento:", 
                           ["Carica da Excel", "Inserisci manualmente"])
    
    if caricamento == "Carica da Excel":
        file_excel = st.file_uploader("Carica file Excel con l'elenco degli studenti", 
                                     type=['xlsx', 'xls'])
        
        if file_excel is not None:
            df_studenti = leggi_excel_studenti(file_excel)
            if df_studenti is not None:
                # Verifica se ci sono colonne per cognome e nome
                colonne = df_studenti.columns.tolist()
                
                col_cognome = st.selectbox("Seleziona la colonna del Cognome:", colonne)
                col_nome = st.selectbox("Seleziona la colonna del Nome:", colonne)
                
                if st.button("Importa Studenti"):
                    studenti_importati = []
                    for _, row in df_studenti.iterrows():
                        try:
                            cognome = str(row[col_cognome]).strip() if not pd.isna(row[col_cognome]) else ""
                            nome = str(row[col_nome]).strip() if not pd.isna(row[col_nome]) else ""
                            
                            if cognome or nome:  # Almeno uno dei due deve essere presente
                                studenti_importati.append({
                                    "cognome": cognome,
                                    "nome": nome
                                })
                        except Exception as e:
                            st.error(f"Errore nell'importazione: {str(e)}")
                    
                    st.session_state.studenti = studenti_importati
                    st.success(f"Importati {len(studenti_importati)} studenti con successo!")
                    salva_dati_sessione()
    
    else:  # Inserimento manuale
        st.subheader("Inserimento manuale studenti")
        
        with st.form("form_studenti_manuale"):
            n_studenti = st.number_input("Numero di studenti da inserire:", 
                                        min_value=1, value=5, step=1)
            
            studenti_manuali = []
            for i in range(int(n_studenti)):
                col1, col2 = st.columns(2)
                with col1:
                    cognome = st.text_input(f"Cognome studente {i+1}")
                with col2:
                    nome = st.text_input(f"Nome studente {i+1}")
                
                if cognome or nome:  # Almeno uno dei due deve essere presente
                    studenti_manuali.append({
                        "cognome": cognome,
                        "nome": nome
                    })
            
            if st.form_submit_button("Salva Studenti"):
                # Filtra gli studenti vuoti
                studenti_manuali = [s for s in studenti_manuali if s["cognome"] or s["nome"]]
                st.session_state.studenti = studenti_manuali
                st.success(f"Salvati {len(studenti_manuali)} studenti con successo!")
                salva_dati_sessione()
    
    # Visualizza elenco studenti corrente
    st.subheader("Elenco Studenti")
    
    if st.session_state.studenti:
        df_visualizza = pd.DataFrame(st.session_state.studenti)
        st.dataframe(df_visualizza, use_container_width=True)
        
        # Pulsante per esportare in Excel
        if st.button("Esporta in Excel"):
            excel_data = converti_a_excel(df_visualizza)
            st.download_button(
                label="Download Excel",
                data=excel_data,
                file_name="elenco_studenti.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        st.info("Nessuno studente presente. Carica o inserisci gli studenti utilizzando le opzioni sopra.")

elif st.session_state.sezione_corrente == 'Generazione Gruppi':
    st.header("Generazione e Gestione Gruppi")
    
    # Verifica se ci sono studenti
    if not st.session_state.studenti:
        st.warning("Non ci sono studenti nel sistema. Vai prima alla sezione 'Elenco Studenti'.")
        st.stop()
    
    # Gestione laboratori
    st.subheader("Gestione Laboratori")
    
    # Selezione delle fasce orarie in cui il laboratorio pu√≤ essere programmato
    fasce_orarie_disponibili = [
        "8:30-11:00",
        "11:10-13:30",
        "14:30-17:00",
        "8:30-13:30",
        "8:30-17:00"
    ]
    
    # Crei un container per il form e gli input fuori dal form
    form_container = st.container()
    
    # Prima mostriamo la form
    with form_container.form("form_laboratori"):
        st.write("Inserisci i dettagli dei laboratori:")
        
        # Input per aggiungere un nuovo laboratorio
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            nome_lab = st.text_input("Nome Laboratorio")
        with col2:
            minutaggio = st.number_input("Durata (minuti)", 
                                       min_value=30, max_value=480, step=30, value=150)
        with col3:
            min_studenti = st.number_input("Min Studenti", 
                                          min_value=1, max_value=20, value=8)
            max_studenti = st.number_input("Max Studenti", 
                                          min_value=min_studenti, max_value=25, value=15)
        with col4:
            tipo_gruppo = st.selectbox("Tipo Gruppo", 
                                      ["Standard (12-15 studenti)", "Ridotto (8-10 studenti)"])
        
        # Selezione delle fasce orarie all'interno del form
        fasce_orarie_selezionate = st.multiselect(
            "Fasce orarie disponibili", 
            fasce_orarie_disponibili,
            default=["8:30-11:00", "11:10-13:30", "14:30-17:00"]  # Default: le fasce brevi
        )
        
        # Ottieni i giorni lavorativi dalle date definite (se esistono)
        date_disponibili = []
        if st.session_state.data_inizio and st.session_state.data_fine:
            try:
                inizio = converti_data_italiana(st.session_state.data_inizio)
                fine = converti_data_italiana(st.session_state.data_fine)
                giorni_lavorativi = crea_giorni_lavorativi(inizio, fine)
                date_disponibili = [d.strftime("%d/%m/%Y") for d in giorni_lavorativi]
            except Exception as e:
                st.warning(f"Impossibile caricare le date: {str(e)}")
        
        # Selezione delle date disponibili per il laboratorio
        st.write("Seleziona le date in cui √® possibile effettuare questo laboratorio:")
        date_lab_selezionate = st.multiselect(
            "Date disponibili (se nessuna √® selezionata, tutte le date sono disponibili)", 
            date_disponibili if date_disponibili else []
        )
        
        form_submit = st.form_submit_button("Aggiungi Laboratorio")
    
    # Gestione del submit fuori dal form
    if form_submit:
        # Verifica se il laboratorio esiste gi√†
        nomi_lab_esistenti = [lab["nome"] for lab in st.session_state.laboratori]
        
        if nome_lab in nomi_lab_esistenti:
            st.error(f"Il laboratorio '{nome_lab}' esiste gi√†!")
        elif not nome_lab:
            st.error("Il nome del laboratorio non pu√≤ essere vuoto!")
        else:
            # Aggiungi nuovo laboratorio
            nuovo_lab = {
                "nome": nome_lab,
                "minutaggio": minutaggio,
                "min_studenti": min_studenti,
                "max_studenti": max_studenti,
                "tipo_gruppo": "standard" if "Standard" in tipo_gruppo else "ridotto",
                "fasce_orarie_disponibili": fasce_orarie_selezionate,
                "date_disponibili": date_lab_selezionate
            }
            
            st.session_state.laboratori.append(nuovo_lab)
            st.success(f"Laboratorio '{nome_lab}' aggiunto con successo!")
            salva_dati_sessione()
    
    # Visualizza laboratori esistenti
    if st.session_state.laboratori:
        st.subheader("Laboratori configurati")
        
        df_laboratori = pd.DataFrame(st.session_state.laboratori)
        df_laboratori.index = df_laboratori.index + 1  # Inizia da 1 invece che da 0
        st.dataframe(df_laboratori, use_container_width=True)
        
        # Modifica delle fasce orarie e date disponibili per un laboratorio esistente
        st.subheader("Modifica fasce orarie e date disponibili per laboratorio")
        lab_da_modificare = st.selectbox("Seleziona laboratorio da modificare:", 
                                        [lab["nome"] for lab in st.session_state.laboratori],
                                        key="modifica_lab_fasce")
        
        # Trova il laboratorio selezionato
        lab_selezionato = next((lab for lab in st.session_state.laboratori if lab["nome"] == lab_da_modificare), None)
        
        if lab_selezionato:
            # Definisci le fasce orarie disponibili
            fasce_orarie_disponibili = [
                "8:30-11:00",
                "11:10-13:30",
                "14:30-17:00",
                "8:30-13:30",
                "8:30-17:00"
            ]
            
            # Ottieni l'elenco delle fasce orarie attualmente selezionate per questo laboratorio
            fasce_attuali = lab_selezionato.get("fasce_orarie_disponibili", ["8:30-11:00", "11:10-13:30", "14:30-17:00"])
            
            # Mostra un multi-select con tutte le fasce orarie, selezionando quelle attualmente configurate
            nuove_fasce = st.multiselect(
                f"Fasce orarie disponibili per '{lab_da_modificare}':", 
                fasce_orarie_disponibili,
                default=fasce_attuali
            )
            
            # Ottieni i giorni lavorativi dalle date definite (se esistono)
            date_disponibili = []
            if st.session_state.data_inizio and st.session_state.data_fine:
                try:
                    inizio = converti_data_italiana(st.session_state.data_inizio)
                    fine = converti_data_italiana(st.session_state.data_fine)
                    giorni_lavorativi = crea_giorni_lavorativi(inizio, fine)
                    date_disponibili = [d.strftime("%d/%m/%Y") for d in giorni_lavorativi]
                except Exception as e:
                    st.warning(f"Impossibile caricare le date: {str(e)}")
            
            # Ottieni le date attualmente selezionate per questo laboratorio
            date_attuali = lab_selezionato.get("date_disponibili", [])
            
            # Selezione delle date disponibili per il laboratorio
            st.write(f"Seleziona le date in cui √® possibile effettuare il laboratorio '{lab_da_modificare}':")
            nuove_date = st.multiselect(
                "Date disponibili (se nessuna √® selezionata, tutte le date sono disponibili)", 
                date_disponibili if date_disponibili else [],
                default=date_attuali
            )
            
            if st.button("Aggiorna impostazioni laboratorio"):
                # Aggiorna il laboratorio con le nuove fasce orarie e date
                for i, lab in enumerate(st.session_state.laboratori):
                    if lab["nome"] == lab_da_modificare:
                        st.session_state.laboratori[i]["fasce_orarie_disponibili"] = nuove_fasce
                        st.session_state.laboratori[i]["date_disponibili"] = nuove_date
                        break
                
                st.success(f"Impostazioni per '{lab_da_modificare}' aggiornate!")
                salva_dati_sessione()
                st.rerun()
        
        # Pulsante per eliminare laboratori
        st.subheader("Elimina laboratorio")
        lab_da_eliminare = st.selectbox("Seleziona laboratorio da eliminare:", 
                                      [lab["nome"] for lab in st.session_state.laboratori])
        
        if st.button("Elimina Laboratorio"):
            st.session_state.laboratori = [lab for lab in st.session_state.laboratori 
                                          if lab["nome"] != lab_da_eliminare]
            st.success(f"Laboratorio '{lab_da_eliminare}' eliminato!")
            salva_dati_sessione()
            st.rerun()
    else:
        st.info("Nessun laboratorio configurato. Aggiungi laboratori utilizzando il form sopra.")
    
    # Generazione gruppi
    st.subheader("Generazione Gruppi")
    
    if st.session_state.laboratori:
        col1, col2 = st.columns(2)
        
        # Gruppi standard
        with col1:
            st.write("Configurazione Gruppi Standard")
            
            n_gruppi_standard = st.number_input("Numero Gruppi Standard (A-E):", 
                                              min_value=1, max_value=10, value=5)
            
            gruppi_standard = {f"Gruppo {chr(65+i)}": [] for i in range(int(n_gruppi_standard))}
            
            if st.button("Genera Gruppi Standard"):
                # Ottieni solo gli studenti per laboratori standard
                labs_standard = [lab for lab in st.session_state.laboratori 
                                if lab["tipo_gruppo"] == "standard"]
                
                if not labs_standard:
                    st.error("Non ci sono laboratori configurati per gruppi standard!")
                else:
                    # Calcola numero medio di studenti per gruppo
                    min_studenti = min([lab["min_studenti"] for lab in labs_standard])
                    max_studenti = max([lab["max_studenti"] for lab in labs_standard])
                    
                    # Studenti totali
                    studenti_totali = st.session_state.studenti.copy()
                    
                    # Distribuisci equamente gli studenti nei gruppi
                    studenti_per_gruppo = len(studenti_totali) // n_gruppi_standard
                    resto = len(studenti_totali) % n_gruppi_standard
                    
                    # Verifica limiti
                    if studenti_per_gruppo < min_studenti:
                        st.warning(f"Con {n_gruppi_standard} gruppi, ci sarebbero meno di {min_studenti} studenti per gruppo!")
                    elif studenti_per_gruppo > max_studenti:
                        st.warning(f"Con {n_gruppi_standard} gruppi, ci sarebbero pi√π di {max_studenti} studenti per gruppo!")
                    
                    # Assegna studenti ai gruppi
                    indice_studente = 0
                    for nome_gruppo in gruppi_standard.keys():
                        studenti_questo_gruppo = studenti_per_gruppo
                        if resto > 0:
                            studenti_questo_gruppo += 1
                            resto -= 1
                            
                        gruppi_standard[nome_gruppo] = studenti_totali[indice_studente:indice_studente+studenti_questo_gruppo]
                        indice_studente += studenti_questo_gruppo
                    
                    st.session_state.gruppi_standard = gruppi_standard
                    st.success("Gruppi standard generati con successo!")
                    salva_dati_sessione()
        
        # Gruppi a capacit√† ridotta
        with col2:
            st.write("Configurazione Gruppi a Capacit√† Ridotta")
            
            n_gruppi_ridotti = st.number_input("Numero Gruppi Ridotti (1-8):", 
                                             min_value=1, max_value=10, value=8)
            
            gruppi_ridotti = {f"Gruppo {i+1}": [] for i in range(int(n_gruppi_ridotti))}
            
            if st.button("Genera Gruppi Ridotti"):
                # Ottieni solo gli studenti per laboratori a capacit√† ridotta
                labs_ridotti = [lab for lab in st.session_state.laboratori 
                               if lab["tipo_gruppo"] == "ridotto"]
                
                if not labs_ridotti:
                    st.error("Non ci sono laboratori configurati per gruppi a capacit√† ridotta!")
                else:
                    # Calcola numero medio di studenti per gruppo
                    min_studenti = min([lab["min_studenti"] for lab in labs_ridotti])
                    max_studenti = max([lab["max_studenti"] for lab in labs_ridotti])
                    
                    # Studenti totali
                    studenti_totali = st.session_state.studenti.copy()
                    
                    # Distribuisci equamente gli studenti nei gruppi
                    studenti_per_gruppo = len(studenti_totali) // n_gruppi_ridotti
                    resto = len(studenti_totali) % n_gruppi_ridotti
                    
                    # Verifica limiti
                    if studenti_per_gruppo < min_studenti:
                        st.warning(f"Con {n_gruppi_ridotti} gruppi, ci sarebbero meno di {min_studenti} studenti per gruppo!")
                    elif studenti_per_gruppo > max_studenti:
                        st.warning(f"Con {n_gruppi_ridotti} gruppi, ci sarebbero pi√π di {max_studenti} studenti per gruppo!")
                    
                    # Assegna studenti ai gruppi
                    indice_studente = 0
                    for nome_gruppo in gruppi_ridotti.keys():
                        studenti_questo_gruppo = studenti_per_gruppo
                        if resto > 0:
                            studenti_questo_gruppo += 1
                            resto -= 1
                            
                        gruppi_ridotti[nome_gruppo] = studenti_totali[indice_studente:indice_studente+studenti_questo_gruppo]
                        indice_studente += studenti_questo_gruppo
                    
                    st.session_state.gruppi_ridotti = gruppi_ridotti
                    st.success("Gruppi a capacit√† ridotta generati con successo!")
                    salva_dati_sessione()
        
        # Visualizza gruppi generati
        st.subheader("Visualizzazione Gruppi")
        
        # Visualizza gruppi standard
        if st.session_state.gruppi_standard:
            st.write("Gruppi Standard:")
            
            for nome_gruppo, studenti in st.session_state.gruppi_standard.items():
                st.write(f"**{nome_gruppo}**: {len(studenti)} studenti")
                
                # Crea DataFrame per questo gruppo
                if studenti:
                    df_gruppo = pd.DataFrame(studenti)
                    st.dataframe(df_gruppo, use_container_width=True)
                else:
                    st.info(f"Nessuno studente assegnato al {nome_gruppo}")
        else:
            st.info("Nessun gruppo standard generato")
        
        # Visualizza gruppi a capacit√† ridotta
        if st.session_state.gruppi_ridotti:
            st.write("Gruppi a Capacit√† Ridotta:")
            
            for nome_gruppo, studenti in st.session_state.gruppi_ridotti.items():
                st.write(f"**{nome_gruppo}**: {len(studenti)} studenti")
                
                # Crea DataFrame per questo gruppo
                if studenti:
                    df_gruppo = pd.DataFrame(studenti)
                    st.dataframe(df_gruppo, use_container_width=True)
                else:
                    st.info(f"Nessuno studente assegnato al {nome_gruppo}")
        else:
            st.info("Nessun gruppo a capacit√† ridotta generato")
        
        # Matrice di appartenenza studenti a gruppi
        if st.session_state.gruppi_standard and st.session_state.gruppi_ridotti:
            st.subheader("Matrice di Appartenenza")
            
            # Crea la matrice di appartenenza
            lista_appartenenza = []
            
            for studente in st.session_state.studenti:
                info_studente = {
                    "cognome": studente["cognome"],
                    "nome": studente["nome"],
                    "gruppo_standard": "",
                    "gruppo_ridotto": ""
                }
                
                # Trova in quale gruppo standard √® lo studente
                for nome_gruppo, studenti in st.session_state.gruppi_standard.items():
                    for s in studenti:
                        if s["cognome"] == studente["cognome"] and s["nome"] == studente["nome"]:
                            info_studente["gruppo_standard"] = nome_gruppo
                            break
                
                # Trova in quale gruppo ridotto √® lo studente
                for nome_gruppo, studenti in st.session_state.gruppi_ridotti.items():
                    for s in studenti:
                        if s["cognome"] == studente["cognome"] and s["nome"] == studente["nome"]:
                            info_studente["gruppo_ridotto"] = nome_gruppo
                            break
                
                lista_appartenenza.append(info_studente)
            
            # Visualizza matrice
            df_appartenenza = pd.DataFrame(lista_appartenenza)
            st.dataframe(df_appartenenza, use_container_width=True)
            
            # Pulsante per esportare in Excel
            if st.button("Esporta Matrice in Excel"):
                excel_data = converti_a_excel(df_appartenenza)
                st.download_button(
                    label="Download Excel",
                    data=excel_data,
                    file_name="matrice_appartenenza.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
    else:
        st.info("Nessun laboratorio configurato. Aggiungi prima i laboratori.")

elif st.session_state.sezione_corrente == 'Aule':
    st.header("Gestione Aule")
    
    # Container per form e campi extra
    form_aule_container = st.container()
    
    # Form per aggiungere aule
    with form_aule_container.form("form_aule"):
        st.write("Inserisci i dettagli dell'aula:")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nome_aula = st.text_input("Nome Aula")
        with col2:
            capacita = st.number_input("Capacit√† (posti)", 
                                      min_value=1, max_value=100, value=15)
        
        # Seleziona i laboratori che possono essere eseguiti in questa aula
        laboratori_disponibili = [lab["nome"] for lab in st.session_state.laboratori]
        
        # Se ci sono laboratori, mostra il selettore
        if laboratori_disponibili:
            laboratori_consentiti = st.multiselect(
                "Laboratori consentiti in quest'aula", 
                laboratori_disponibili,
                default=laboratori_disponibili  # Default: tutti selezionati
            )
        else:
            laboratori_consentiti = []
        
        form_aule_submit = st.form_submit_button("Aggiungi Aula")
    
    # Gestione del submit fuori dal form
    if form_aule_submit:
        # Verifica se l'aula esiste gi√†
        nomi_aule_esistenti = [aula["nome"] for aula in st.session_state.aule]
        
        if nome_aula in nomi_aule_esistenti:
            st.error(f"L'aula '{nome_aula}' esiste gi√†!")
        elif not nome_aula:
            st.error("Il nome dell'aula non pu√≤ essere vuoto!")
        else:
            # Aggiungi nuova aula
            nuova_aula = {
                "nome": nome_aula,
                "capacita": capacita,
                "laboratori_consentiti": laboratori_consentiti
            }
            
            st.session_state.aule.append(nuova_aula)
            st.success(f"Aula '{nome_aula}' aggiunta con successo!")
            salva_dati_sessione()
    
    # Visualizza aule esistenti
    if st.session_state.aule:
        st.subheader("Aule configurate")
        
        df_aule = pd.DataFrame(st.session_state.aule)
        df_aule.index = df_aule.index + 1  # Inizia da 1 invece che da 0
        st.dataframe(df_aule, use_container_width=True)
        
        # Modifica dei laboratori consentiti per un'aula esistente
        st.subheader("Modifica laboratori consentiti per aula")
        aula_da_modificare = st.selectbox("Seleziona aula da modificare:", 
                                        [aula["nome"] for aula in st.session_state.aule],
                                        key="modifica_aula_laboratori")
        
        # Trova l'aula selezionata
        aula_selezionata = next((aula for aula in st.session_state.aule if aula["nome"] == aula_da_modificare), None)
        
        if aula_selezionata:
            # Ottieni l'elenco di tutti i laboratori
            laboratori_disponibili = [lab["nome"] for lab in st.session_state.laboratori]
            
            # Ottieni l'elenco dei laboratori attualmente consentiti per questa aula
            laboratori_attualmente_consentiti = aula_selezionata.get("laboratori_consentiti", [])
            
            # Mostra un multi-select con tutti i laboratori, selezionando quelli attualmente consentiti
            nuovi_laboratori_consentiti = st.multiselect(
                f"Laboratori consentiti per '{aula_da_modificare}':", 
                laboratori_disponibili,
                default=laboratori_attualmente_consentiti
            )
            
            if st.button("Aggiorna laboratori consentiti"):
                # Aggiorna l'aula con i nuovi laboratori consentiti
                for i, aula in enumerate(st.session_state.aule):
                    if aula["nome"] == aula_da_modificare:
                        st.session_state.aule[i]["laboratori_consentiti"] = nuovi_laboratori_consentiti
                        break
                
                st.success(f"Laboratori consentiti per '{aula_da_modificare}' aggiornati!")
                salva_dati_sessione()
                st.rerun()
        
        # Pulsante per eliminare aule
        st.subheader("Elimina aula")
        aula_da_eliminare = st.selectbox("Seleziona aula da eliminare:", 
                                       [aula["nome"] for aula in st.session_state.aule])
        
        if st.button("Elimina Aula"):
            st.session_state.aule = [aula for aula in st.session_state.aule 
                                    if aula["nome"] != aula_da_eliminare]
            st.success(f"Aula '{aula_da_eliminare}' eliminata!")
            salva_dati_sessione()
            st.rerun()
        
        # Visualizza grafico capacit√† aule
        st.subheader("Grafico Capacit√† Aule")
        
        fig = px.bar(
            df_aule,
            x="nome",
            y="capacita",
            title="Capacit√† Aule",
            labels={"nome": "Aula", "capacita": "Capacit√† (posti)"}
        )
        
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Nessuna aula configurata. Aggiungi aule utilizzando il form sopra.")

elif st.session_state.sezione_corrente == 'Date':
    st.header("Configurazione Date")
    
    st.write("Imposta le date di inizio e fine per il periodo di programmazione.")
    
    # Form per impostare le date
    with st.form("form_date"):
        col1, col2 = st.columns(2)
        
        # Converti le date esistenti in formato datetime se presenti
        default_data_inizio = None
        default_data_fine = None
        
        if st.session_state.data_inizio:
            try:
                default_data_inizio = converti_data_italiana(st.session_state.data_inizio)
            except:
                pass
                
        if st.session_state.data_fine:
            try:
                default_data_fine = converti_data_italiana(st.session_state.data_fine)
            except:
                pass
        
        with col1:
            # Usa il selettore di data invece del text_input
            data_inizio_dt = st.date_input(
                "Data Inizio",
                value=default_data_inizio if default_data_inizio else datetime.now(),
                format="DD/MM/YYYY"
            )
            
            # Converti la data selezionata in formato stringa italiano
            data_inizio = data_inizio_dt.strftime("%d/%m/%Y")
        
        with col2:
            # Usa il selettore di data invece del text_input
            data_fine_dt = st.date_input(
                "Data Fine",
                value=default_data_fine if default_data_fine else (datetime.now() + timedelta(days=14)),
                format="DD/MM/YYYY",
                min_value=data_inizio_dt  # La data di fine non pu√≤ essere precedente alla data di inizio
            )
            
            # Converti la data selezionata in formato stringa italiano
            data_fine = data_fine_dt.strftime("%d/%m/%Y")
        
        if st.form_submit_button("Salva Date"):
            try:
                if data_inizio_dt > data_fine_dt:
                    st.error("La data di inizio non pu√≤ essere successiva alla data di fine!")
                else:
                    st.session_state.data_inizio = data_inizio
                    st.session_state.data_fine = data_fine
                    st.success("Date salvate con successo!")
                    salva_dati_sessione()
            except Exception as e:
                st.error(f"Errore: {str(e)}")
    
    # Visualizza giorni lavorativi
    if st.session_state.data_inizio and st.session_state.data_fine:
        st.subheader("Giorni Lavorativi")
        
        try:
            inizio = converti_data_italiana(st.session_state.data_inizio)
            fine = converti_data_italiana(st.session_state.data_fine)
            
            if inizio and fine:
                giorni_lavorativi = crea_giorni_lavorativi(inizio, fine)
                
                # Visualizza calendario
                if giorni_lavorativi:
                    st.write(f"Periodo selezionato: dal {st.session_state.data_inizio} al {st.session_state.data_fine}")
                    st.write(f"Numero totale di giorni lavorativi: {len(giorni_lavorativi)}")
                    
                    # Crea DataFrame per calendario
                    df_calendario = pd.DataFrame({
                        "Data": [d.strftime("%d/%m/%Y") for d in giorni_lavorativi],
                        "Giorno": [d.strftime("%A") for d in giorni_lavorativi],
                    })
                    
                    st.dataframe(df_calendario, use_container_width=True)
                    
                    # Controlla solo il vincolo minimo di 14 giorni
                    if st.session_state.laboratori:
                        n_laboratori = len(st.session_state.laboratori)
                        n_giorni = len(giorni_lavorativi)
                        
                        # CONTROLLO: Verifica vincolo minimo di 14 giorni lavorativi
                        min_giorni_necessari = 14
                        if n_giorni < min_giorni_necessari:
                            # Questo √® solo un avviso semplice, come richiesto
                            st.warning(f"Attenzione: hai selezionato solo {n_giorni} giorni. Per una programmazione completa sono necessari almeno {min_giorni_necessari} giorni.")
                        
                        # Nota informativa semplice sul periodo selezionato
                        st.success(f"Periodo di programmazione impostato: {len(giorni_lavorativi)} giorni lavorativi selezionati.")
                else:
                    st.info("Nessun giorno lavorativo nel periodo selezionato.")
        except Exception as e:
            st.error(f"Errore nella visualizzazione dei giorni lavorativi: {str(e)}")
    else:
        st.info("Imposta le date di inizio e fine per visualizzare i giorni lavorativi.")

elif st.session_state.sezione_corrente == 'Programmazione':
    st.header("Programmazione Laboratori")
    
    # Verifica che tutti i prerequisiti siano soddisfatti
    if not st.session_state.studenti:
        st.warning("Non ci sono studenti nel sistema. Vai prima alla sezione 'Elenco Studenti'.")
        st.stop()
    
    if not st.session_state.laboratori:
        st.warning("Non ci sono laboratori configurati. Vai prima alla sezione 'Generazione Gruppi'.")
        st.stop()
    
    if not st.session_state.aule:
        st.warning("Non ci sono aule configurate. Vai prima alla sezione 'Aule'.")
        st.stop()
    
    if not st.session_state.data_inizio or not st.session_state.data_fine:
        st.warning("Le date di inizio e fine non sono impostate. Vai prima alla sezione 'Date Inizio/Fine'.")
        st.stop()
    
    if not st.session_state.gruppi_standard or not st.session_state.gruppi_ridotti:
        st.warning("I gruppi non sono stati generati. Vai prima alla sezione 'Generazione Gruppi'.")
        st.stop()
    
    # Ottieni giorni lavorativi
    inizio = converti_data_italiana(st.session_state.data_inizio)
    fine = converti_data_italiana(st.session_state.data_fine)
    giorni_lavorativi = crea_giorni_lavorativi(inizio, fine)
    
    # Funzione per generare automaticamente la programmazione
    def genera_programmazione_automatica():
        # Reset programmazione esistente
        st.session_state.programmazione = []
        
        # Calcola i giorni lavorativi
        inizio = converti_data_italiana(st.session_state.data_inizio)
        fine = converti_data_italiana(st.session_state.data_fine)
        giorni_lavorativi = crea_giorni_lavorativi(inizio, fine)
        
        # Stampa informazioni di debug generali
        st.write("### Informazioni di Debug:")
        st.write(f"- Totale giorni disponibili: {len(giorni_lavorativi)}")
        st.write(f"- Totale aule configurate: {len(st.session_state.aule)}")
        
        # Verifica se ci sono laboratori a capacit√† ridotta
        all_labs = st.session_state.laboratori
        labs_standard = []
        labs_ridotti = []
        
        for lab in all_labs:
            if "tipo_gruppo" not in lab:
                st.warning(f"Lab {lab['nome']} non ha tipo_gruppo specificato. Lo imposto come 'standard'.")
                lab["tipo_gruppo"] = "standard"
            
            if lab["tipo_gruppo"] == "standard":
                labs_standard.append(lab)
            elif lab["tipo_gruppo"] == "ridotto":
                labs_ridotti.append(lab)
            else:
                st.warning(f"Tipo gruppo non riconosciuto: {lab['tipo_gruppo']} per {lab['nome']}. Lo imposto come 'standard'.")
                lab["tipo_gruppo"] = "standard"
                labs_standard.append(lab)
        
        st.write(f"- Laboratori standard: {len(labs_standard)}")
        st.write(f"- Laboratori a capacit√† ridotta: {len(labs_ridotti)}")
        st.write(f"- Gruppi standard: {list(st.session_state.gruppi_standard.keys())}")
        st.write(f"- Gruppi ridotti: {list(st.session_state.gruppi_ridotti.keys())}")
        
        # Ordina i laboratori per durata (dal pi√π lungo al pi√π breve)
        labs_standard.sort(key=lambda x: x["minutaggio"], reverse=True)
        labs_ridotti.sort(key=lambda x: x["minutaggio"], reverse=True)
        
        # Prepara le date disponibili
        date_disponibili = [d.strftime("%d/%m/%Y") for d in giorni_lavorativi]
        
        # Definisci fasce orarie disponibili 
        fasce_orarie = [
            {"inizio": "08:30", "fine": "11:00"},  # Mattina 1
            {"inizio": "11:10", "fine": "13:30"},  # Mattina 2
            {"inizio": "14:30", "fine": "17:00"}   # Pomeriggio
        ]
        
        # Classifica le aule
        # Prendi le aule con capacit√† >= 15 per i gruppi standard
        aule_standard = [a for a in st.session_state.aule if a["capacita"] >= 15]
        
        # Prendi le aule con capacit√† < 15 o con nomi specifici per i gruppi ridotti
        aule_ridotte = [a for a in st.session_state.aule if a["capacita"] < 15 or 
                         a["nome"] in ["Florence", "Esercitazione 1", "Esercitazione 2", "Aula Piccola"]]
        
        # Fallback: se non ci sono aule ridotte, usa quelle standard
        if not aule_ridotte:
            st.warning("Non sono state trovate aule specifiche per gruppi ridotti. Verranno usate le aule standard.")
            aule_ridotte = aule_standard.copy()
        
        st.write(f"- Aule per gruppi standard: {[a['nome'] for a in aule_standard]}")
        st.write(f"- Aule per gruppi ridotti: {[a['nome'] for a in aule_ridotte]}")
        
        # Crea una struttura per tracciare l'occupazione delle aule
        occupazione_aule = {}
        for data in date_disponibili:
            occupazione_aule[data] = {}
            for aula in st.session_state.aule:
                occupazione_aule[data][aula["nome"]] = {
                    "08:30-11:00": False,  # False = libera, True = occupata
                    "11:10-13:30": False,
                    "14:30-17:00": False
                }
        
        # Crea una struttura per tracciare l'occupazione dei gruppi
        occupazione_gruppi = {}
        for data in date_disponibili:
            occupazione_gruppi[data] = {}
            for gruppo in st.session_state.gruppi_standard:
                occupazione_gruppi[data][f"standard_{gruppo}"] = {
                    "08:30-11:00": False,
                    "11:10-13:30": False,
                    "14:30-17:00": False
                }
            for gruppo in st.session_state.gruppi_ridotti:
                occupazione_gruppi[data][f"ridotto_{gruppo}"] = {
                    "08:30-11:00": False,
                    "11:10-13:30": False,
                    "14:30-17:00": False
                }
        
        # Mappa durate dei laboratori alle fasce orarie appropriate, considerando le fasce disponibili
        def get_fasce_per_durata(minutaggio, lab=None):
            # Converti i formati delle fasce orarie per corrispondenza
            mapping_fasce = {
                "8:30-11:00": "08:30-11:00",
                "11:00-13:30": "11:10-13:30", # Per retrocompatibilit√†
                "11:10-13:30": "11:10-13:30",
                "14:30-17:00": "14:30-17:00",
                "8:30-13:30": "08:30-13:30",
                "8:30-17:00": "08:30-17:00"
            }
            
            # Se il laboratorio √® specificato e ha fasce orarie disponibili, usa solo quelle
            if lab and "fasce_orarie_disponibili" in lab and lab["fasce_orarie_disponibili"]:
                fasce_disponibili = []
                
                # Converti le fasce nel formato corretto
                for fascia_stringa in lab["fasce_orarie_disponibili"]:
                    if fascia_stringa in mapping_fasce:
                        fascia_formato = mapping_fasce[fascia_stringa]
                        
                        # Assegna indice in base alla fascia
                        if fascia_formato == "08:30-11:00":
                            indice = 0
                        elif fascia_formato == "11:10-13:30":
                            indice = 1
                        elif fascia_formato == "14:30-17:00":
                            indice = 2
                        else:
                            indice = 0  # Per fasce pi√π lunghe
                            
                        fasce_disponibili.append((fascia_formato, indice))
                
                if fasce_disponibili:
                    return fasce_disponibili
            
            # Default se non ci sono fasce specificate o se il laboratorio non ha fasce configurate
            if minutaggio <= 150:
                return [("08:30-11:00", 0), ("11:10-13:30", 1), ("14:30-17:00", 2)]
            elif minutaggio <= 300:
                return [("08:30-13:30", 0)]  # Occupa mattina_1 + mattina_2
            else:
                return [("08:30-17:00", 0)]  # Occupa tutta la giornata
        
        # Funzione per verificare se una fascia oraria √® disponibile
        def is_fascia_disponibile(data, aula, fascia, gruppo, tipo_gruppo):
            # Se √® una fascia che occupa pi√π slot
            if fascia == "08:30-13:30":
                # Verifica che sia mattina_1 che mattina_2 siano liberi
                if (occupazione_aule[data][aula]["08:30-11:00"] or 
                    occupazione_aule[data][aula]["11:10-13:30"]):
                    return False
                
                # Verifica anche che il gruppo non sia occupato
                gruppo_key = f"{tipo_gruppo}_{gruppo}"
                if (occupazione_gruppi[data][gruppo_key]["08:30-11:00"] or 
                    occupazione_gruppi[data][gruppo_key]["11:10-13:30"]):
                    return False
                
                return True
            elif fascia == "08:30-17:00":
                # Verifica che tutti gli slot siano liberi
                if (occupazione_aule[data][aula]["08:30-11:00"] or 
                    occupazione_aule[data][aula]["11:10-13:30"] or
                    occupazione_aule[data][aula]["14:30-17:00"]):
                    return False
                
                # Verifica anche che il gruppo non sia occupato
                gruppo_key = f"{tipo_gruppo}_{gruppo}"
                if (occupazione_gruppi[data][gruppo_key]["08:30-11:00"] or 
                    occupazione_gruppi[data][gruppo_key]["11:10-13:30"] or
                    occupazione_gruppi[data][gruppo_key]["14:30-17:00"]):
                    return False
                
                return True
            else:
                # Fascia oraria singola
                # Verifica che l'aula sia libera
                if occupazione_aule[data][aula][fascia]:
                    return False
                
                # Verifica che il gruppo non sia occupato
                gruppo_key = f"{tipo_gruppo}_{gruppo}"
                if occupazione_gruppi[data][gruppo_key][fascia]:
                    return False
                
                return True
        
        # Funzione per marcare una fascia oraria come occupata
        def marca_fascia_occupata(data, aula, fascia, gruppo, tipo_gruppo):
            # Se √® una fascia che occupa pi√π slot
            if fascia == "08:30-13:30":
                # Marca sia mattina_1 che mattina_2 come occupati
                occupazione_aule[data][aula]["08:30-11:00"] = True
                occupazione_aule[data][aula]["11:10-13:30"] = True
                
                # Marca anche il gruppo come occupato
                gruppo_key = f"{tipo_gruppo}_{gruppo}"
                occupazione_gruppi[data][gruppo_key]["08:30-11:00"] = True
                occupazione_gruppi[data][gruppo_key]["11:10-13:30"] = True
            elif fascia == "08:30-17:00":
                # Marca tutti gli slot come occupati
                occupazione_aule[data][aula]["08:30-11:00"] = True
                occupazione_aule[data][aula]["11:10-13:30"] = True
                occupazione_aule[data][aula]["14:30-17:00"] = True
                
                # Marca anche il gruppo come occupato
                gruppo_key = f"{tipo_gruppo}_{gruppo}"
                occupazione_gruppi[data][gruppo_key]["08:30-11:00"] = True
                occupazione_gruppi[data][gruppo_key]["11:10-13:30"] = True
                occupazione_gruppi[data][gruppo_key]["14:30-17:00"] = True
            else:
                # Fascia oraria singola
                occupazione_aule[data][aula][fascia] = True
                
                # Marca anche il gruppo come occupato
                gruppo_key = f"{tipo_gruppo}_{gruppo}"
                occupazione_gruppi[data][gruppo_key][fascia] = True
        
        # Funzione per calcolare l'ora di fine in base alla fascia
        def get_ora_fine(fascia):
            if fascia == "08:30-11:00":
                return "11:00"
            elif fascia == "11:10-13:30":
                return "13:30"
            elif fascia == "14:30-17:00":
                return "17:00"
            elif fascia == "08:30-13:30":
                return "13:30"
            elif fascia == "08:30-17:00":
                return "17:00"  # Considera la pausa pranzo come parte della giornata
            else:
                return fascia.split("-")[1]
        
        # Funzione per calcolare l'ora di inizio in base alla fascia
        def get_ora_inizio(fascia):
            return fascia.split("-")[0]
        
        # Funzione di utilit√† per programmare un laboratorio
        def programma_laboratorio(lab, gruppo, tipo_gruppo, aule_disponibili):
            lab_programmato = False
            
            # Verifica se il laboratorio ha date specifiche in cui pu√≤ essere eseguito
            date_lab_specifiche = lab.get("date_disponibili", [])
            # Se sono state specificate date per questo laboratorio, usa solo quelle
            date_da_considerare = date_lab_specifiche if date_lab_specifiche else date_disponibili
            
            # Struttura per memorizzare tutte le combinazioni valide, per scegliere la migliore
            combinazioni_valide = []
            
            # Trova tutte le combinazioni data-ora-aula per questo laboratorio
            for data in date_da_considerare:
                # Controlla che questa data sia tra quelle disponibili nel periodo
                if data not in date_disponibili:
                    continue  # Salta questa data se non √® nel periodo di programmazione
                
                # Ottieni le fasce orarie adatte per la durata del laboratorio, considerando le preferenze
                fasce_adatte = get_fasce_per_durata(lab["minutaggio"], lab)
                
                for fascia, indice_fascia in fasce_adatte:
                    # Filtra solo le aule che consentono questo laboratorio
                    aule_compatibili = []
                    for aula in aule_disponibili:
                        # Controlla se l'aula specifica i laboratori consentiti
                        if "laboratori_consentiti" in aula:
                            # Se l'aula specifica i laboratori consentiti, verifica che questo laboratorio sia incluso
                            if lab["nome"] in aula["laboratori_consentiti"]:
                                aule_compatibili.append(aula)
                        else:
                            # Se l'aula non specifica i laboratori consentiti, assumiamo che tutti i laboratori siano consentiti
                            aule_compatibili.append(aula)
                    
                    # Se non ci sono aule compatibili, salta questa fascia oraria
                    if not aule_compatibili:
                        continue
                    
                    for aula in aule_compatibili:
                        # Verifica se questa combinazione √® disponibile
                        if is_fascia_disponibile(data, aula["nome"], fascia, gruppo, tipo_gruppo):
                            # Calcola punteggio di ottimizzazione per questa combinazione
                            # Criteri: priorit√† alle date anteriori, alle aule pi√π piccole 
                            # ma adeguate, e alle fasce orarie contigue ad altri eventi
                            
                            # Ottieni l'indice della data (per dare priorit√† alle date precedenti)
                            indice_data = date_disponibili.index(data)
                            
                            # Calcola l'efficienza di utilizzo dell'aula 
                            # (rapporto tra studenti e capacit√†, idealmente vicino a 1)
                            studenti_per_gruppo = 0
                            if tipo_gruppo == "standard":
                                studenti_per_gruppo = len(st.session_state.gruppi_standard.get(gruppo, []))
                            else:
                                studenti_per_gruppo = len(st.session_state.gruppi_ridotti.get(gruppo, []))
                            
                            capacita_aula = aula.get("capacita", 10)  # Valore di default
                            efficienza_utilizzo = studenti_per_gruppo / capacita_aula if capacita_aula > 0 else 0
                            
                            # Verifica se ci sono eventi gi√† programmati in date vicine
                            eventi_stesso_giorno = sum(1 for e in st.session_state.programmazione if e["data"] == data)
                            
                            # Calcola punteggio finale (pi√π basso √® meglio)
                            # Diamo priorit√† a:
                            # 1. Date che gi√† hanno eventi (per compattare)
                            # 2. Efficienza dell'utilizzo dell'aula
                            # 3. Date precedenti (per completare prima le prime settimane)
                            punteggio = (
                                - eventi_stesso_giorno * 10  # Priorit√† alta a giorni gi√† occupati
                                - efficienza_utilizzo * 5    # Priorit√† a utilizzo efficiente dell'aula
                                + indice_data * 2            # Leggera penalit√† per date pi√π avanti
                                + indice_fascia              # Leggera priorit√† alle prime fasce della giornata
                            )
                            
                            combinazioni_valide.append({
                                "data": data,
                                "fascia": fascia,
                                "aula": aula,
                                "punteggio": punteggio
                            })
            
            # Se abbiamo combinazioni valide, scegli quella con il punteggio migliore (pi√π basso)
            if combinazioni_valide:
                # Ordina per punteggio (crescente) e scegli la migliore
                combinazioni_valide.sort(key=lambda x: x["punteggio"])
                migliore = combinazioni_valide[0]
                
                # Estrai i dati della combinazione migliore
                data = migliore["data"]
                fascia = migliore["fascia"]
                aula = migliore["aula"]
                
                # Ottieni ora inizio/fine
                ora_inizio = get_ora_inizio(fascia)
                ora_fine = get_ora_fine(fascia)
                
                # Se la fascia √® troppo lunga per il laboratorio, calcola l'ora di fine effettiva
                if lab["minutaggio"] <= 150 and fascia in ["08:30-11:00", "11:10-13:30", "14:30-17:00"]:
                    ora_fine = calcola_fascia_oraria(ora_inizio, lab["minutaggio"])
                
                # Programma il laboratorio
                nuovo_evento = {
                    "data": data,
                    "laboratorio": lab["nome"],
                    "ora_inizio": ora_inizio,
                    "ora_fine": ora_fine,
                    "aula": aula["nome"],
                    "gruppo": gruppo,
                    "tipo_gruppo": tipo_gruppo
                }
                
                st.session_state.programmazione.append(nuovo_evento)
                
                # Marca come occupato
                marca_fascia_occupata(data, aula["nome"], fascia, gruppo, tipo_gruppo)
                
                # Mostra dettagli e punteggio per debugging
                st.write(f"Programmato: {lab['nome']} - Gruppo {tipo_gruppo} {gruppo} - {data} {ora_inizio}-{ora_fine} - Aula {aula['nome']} (punteggio: {migliore['punteggio']:.1f})")
                lab_programmato = True
            
            return lab_programmato
        
        # Definizione dei vincoli
        # Vincolo 1: Laboratori che devono essere programmati negli ultimi giorni
        laboratori_ultimi_giorni = ["Gestione Terapia", "Gestione Mobilizzazione", "Valutazione Respiratoria", "Valutazione Cardiocircolatoria"]
        
        # Vincolo 2: Laboratori che devono essere programmati nella stessa giornata
        laboratori_stessa_giornata = ["Mobilizzazione", "Ergonomia"]
        
        # Funzione per verificare se un laboratorio √® soggetto al vincolo 1
        def √®_laboratorio_ultimi_giorni(nome_lab):
            return nome_lab in laboratori_ultimi_giorni
        
        # Funzione per verificare se un laboratorio √® soggetto al vincolo 2
        def √®_laboratorio_stessa_giornata(nome_lab):
            return nome_lab in laboratori_stessa_giornata
        
        # Classificazione dei laboratori secondo i vincoli
        labs_vincolo1_standard = [lab for lab in labs_standard if √®_laboratorio_ultimi_giorni(lab["nome"])]
        labs_vincolo1_ridotti = [lab for lab in labs_ridotti if √®_laboratorio_ultimi_giorni(lab["nome"])]
        
        labs_vincolo2_standard = [lab for lab in labs_standard if √®_laboratorio_stessa_giornata(lab["nome"])]
        labs_vincolo2_ridotti = [lab for lab in labs_ridotti if √®_laboratorio_stessa_giornata(lab["nome"])]
        
        labs_standard_normali = [lab for lab in labs_standard if not √®_laboratorio_ultimi_giorni(lab["nome"]) and not √®_laboratorio_stessa_giornata(lab["nome"])]
        labs_ridotti_normali = [lab for lab in labs_ridotti if not √®_laboratorio_ultimi_giorni(lab["nome"]) and not √®_laboratorio_stessa_giornata(lab["nome"])]
        
        st.write("### Classificazione laboratori secondo i vincoli:")
        st.write(f"- Laboratori da programmare ultimi giorni (Vincolo 1): {[lab['nome'] for lab in labs_vincolo1_standard + labs_vincolo1_ridotti]}")
        st.write(f"- Laboratori da programmare stessa giornata (Vincolo 2): {[lab['nome'] for lab in labs_vincolo2_standard + labs_vincolo2_ridotti]}")
        st.write(f"- Altri laboratori standard: {[lab['nome'] for lab in labs_standard_normali]}")
        st.write(f"- Altri laboratori ridotti: {[lab['nome'] for lab in labs_ridotti_normali]}")
        
        # Inverte l'ordine delle date per avere gli ultimi giorni
        date_ultime = date_disponibili.copy()
        date_ultime.reverse()
        
        # FASE 1: Programmazione dei laboratori con VINCOLO 1 (programmazione specifica per gli ultimi 4 giorni)
        st.write("### Programmazione laboratori vincolo 1 (ultimi 4 giorni):")
        
        # Verifica che ci siano almeno 4 giorni disponibili
        if len(date_disponibili) < 4:
            st.error("Non ci sono abbastanza giorni disponibili per programmare i laboratori con vincolo 1 (servono almeno 4 giorni)")
        else:
            # Seleziona gli ultimi 4 giorni
            ultimi_quattro_giorni = date_disponibili[-4:]
            ultimo_giorno = ultimi_quattro_giorni[3]  # Ultimo giorno
            penultimo_giorno = ultimi_quattro_giorni[2]  # Penultimo giorno
            terzultimo_giorno = ultimi_quattro_giorni[1]  # Terzultimo giorno
            quartultimo_giorno = ultimi_quattro_giorni[0]  # Quartultimo giorno
            
            st.write(f"Ultimo giorno: {ultimo_giorno} - Valutazione Respiratoria")
            st.write(f"Penultimo giorno: {penultimo_giorno} - Valutazione Cardiocircolatoria")
            st.write(f"Terzultimo giorno: {terzultimo_giorno} - Gestione Mobilizzazione")
            st.write(f"Quartultimo giorno: {quartultimo_giorno} - Gestione Terapia")
            
            # Definisci le aule specifiche da utilizzare per questi laboratori
            aule_specifiche_nomi = ["Florence", "Esercitazione 1", "Esercitazione 2", "Leininger 1"]
            
            # Verifica che le aule specificate esistano
            aule_speciali = []
            aule_mancanti = []
            
            for nome_aula in aule_specifiche_nomi:
                aula_trovata = False
                for aula in st.session_state.aule:
                    if aula["nome"] == nome_aula:
                        aule_speciali.append(aula)
                        aula_trovata = True
                        break
                if not aula_trovata:
                    aule_mancanti.append(nome_aula)
            
            if aule_mancanti:
                st.error(f"Le seguenti aule richieste non sono state trovate: {', '.join(aule_mancanti)}. Aggiungi queste aule prima di procedere.")
            elif len(aule_speciali) < 4:
                st.error(f"Servono esattamente 4 aule per programmare i laboratori con vincolo 1, ma ne sono state trovate solo {len(aule_speciali)}")
            else:
                nomi_aule_speciali = [a["nome"] for a in aule_speciali]
                
                st.write(f"Aule selezionate per i laboratori del vincolo 1: {nomi_aule_speciali}")
                
                # Rimuovi questi laboratori speciali dalle liste di laboratori da programmare normalmente
                labs_vincolo1_standard = [lab for lab in labs_standard if √®_laboratorio_ultimi_giorni(lab["nome"])]
                labs_vincolo1_ridotti = [lab for lab in labs_ridotti if √®_laboratorio_ultimi_giorni(lab["nome"])]
                
                # Aggiorna le liste dei laboratori normali escludendo quelli speciali
                labs_standard_normali = [lab for lab in labs_standard_normali if lab["nome"] not in [l["nome"] for l in labs_vincolo1_standard]]
                labs_ridotti_normali = [lab for lab in labs_ridotti_normali if lab["nome"] not in [l["nome"] for l in labs_vincolo1_ridotti]]
                
                # Assegnazione per ogni laboratorio e giorno specifico
                laboratori_e_giorni = [
                    ("Valutazione Respiratoria", ultimo_giorno),
                    ("Valutazione Cardiocircolatoria", penultimo_giorno),
                    ("Gestione Mobilizzazione", terzultimo_giorno),
                    ("Gestione Terapia", quartultimo_giorno)
                ]
                
                for nome_lab, giorno in laboratori_e_giorni:
                    st.write(f"### Programmazione di {nome_lab} - {giorno}")
                    
                    # Ottieni info sul laboratorio
                    lab_info = next((lab for lab in labs_standard if lab["nome"] == nome_lab), None)
                    if not lab_info:
                        st.warning(f"Laboratorio '{nome_lab}' non trovato tra i laboratori configurati")
                        continue
                    
                    # In questo caso specifico, utilizziamo gruppi a capacit√† ridotta (1-8)
                    # invece dei gruppi standard
                    
                    # Programma i gruppi a capacit√† ridotta (1-8) nelle fasce orarie specifiche
                    # Verifichiamo esattamente quali fasce orarie hai richiesto
                    
                    # Prima fascia: mattina per gruppi 1-4
                    fascia_mattina = "08:30-11:00"
                    ora_inizio_mattina = "08:30"  # Fissa l'ora di inizio
                    ora_fine_mattina = "11:00"  # Fissa l'ora di fine
                    
                    # Seconda fascia: tarda mattina per gruppi 5-8
                    ora_inizio_tarda_mattina = "11:10"  # Fissa l'ora di inizio
                    ora_fine_tarda_mattina = "13:40"  # Fissa l'ora di fine
                    fascia_tarda_mattina = "11:10-13:30"  # Per il sistema di occupazione aule
                    
                    # Assegna gruppi 1-4 alla prima fascia (8:30-11:00)
                    for idx, gruppo_num in enumerate(range(1, 5)):  # Gruppi 1-4
                        gruppo = str(gruppo_num)
                        aula = nomi_aule_speciali[idx]
                        
                        # Crea l'evento per la mattina
                        nuovo_evento = {
                            "data": giorno,
                            "laboratorio": nome_lab,
                            "ora_inizio": ora_inizio_mattina,
                            "ora_fine": ora_fine_mattina,
                            "aula": aula,
                            "gruppo": gruppo,
                            "tipo_gruppo": "ridotto"
                        }
                        
                        st.session_state.programmazione.append(nuovo_evento)
                        marca_fascia_occupata(giorno, aula, fascia_mattina, gruppo, "ridotto")
                        st.write(f"Programmato (vincolo 1): {nome_lab} - Gruppo ridotto {gruppo} - {giorno} {ora_inizio_mattina}-{ora_fine_mattina} - Aula {aula}")
                    
                    # Assegna gruppi 5-8 alla seconda fascia (11:10-13:40)
                    for idx, gruppo_num in enumerate(range(5, 9)):  # Gruppi 5-8
                        gruppo = str(gruppo_num)
                        aula = nomi_aule_speciali[idx]
                        
                        # Crea l'evento per la tarda mattina
                        nuovo_evento = {
                            "data": giorno,
                            "laboratorio": nome_lab,
                            "ora_inizio": ora_inizio_tarda_mattina,
                            "ora_fine": ora_fine_tarda_mattina,
                            "aula": aula,
                            "gruppo": gruppo,
                            "tipo_gruppo": "ridotto"
                        }
                        
                        st.session_state.programmazione.append(nuovo_evento)
                        marca_fascia_occupata(giorno, aula, fascia_tarda_mattina, gruppo, "ridotto")
                        st.write(f"Programmato (vincolo 1): {nome_lab} - Gruppo ridotto {gruppo} - {giorno} {ora_inizio_tarda_mattina}-{ora_fine_tarda_mattina} - Aula {aula}")
                
                # Rimuoviamo questi laboratori dalle liste per evitare che vengano programmati di nuovo
                for lab_nome, _ in laboratori_e_giorni:
                    labs_vincolo1_standard = [lab for lab in labs_vincolo1_standard if lab["nome"] != lab_nome]
                    labs_vincolo1_ridotti = [lab for lab in labs_vincolo1_ridotti if lab["nome"] != lab_nome]
        
        # FASE 2: Programmazione dei laboratori con VINCOLO 2 (stessa giornata)
        st.write("### Programmazione laboratori vincolo 2 (stessa giornata):")
        
        # Funzione per programmare due laboratori nella stessa giornata
        def programma_laboratori_stessa_giornata(labs, gruppo, tipo_gruppo, aule_disp):
            # Verifica che siano esattamente "Ergonomia" e "Mobilizzazione"
            sono_ergonomia_mobilizzazione = (
                len(labs) == 2 and 
                "Ergonomia" in [lab["nome"] for lab in labs] and 
                "Mobilizzazione" in [lab["nome"] for lab in labs]
            )
            
            # Gestione speciale per Ergonomia e Mobilizzazione
            if sono_ergonomia_mobilizzazione:
                return programma_ergonomia_mobilizzazione(labs, gruppo, tipo_gruppo, aule_disp)
            
            # Gestione standard per altri laboratori
            # Trova le date comuni disponibili per tutti i laboratori
            date_comuni = date_disponibili.copy()
            
            # Filtra per le date specifiche di ogni laboratorio
            for lab in labs:
                date_lab_specifiche = lab.get("date_disponibili", [])
                if date_lab_specifiche:  # Se questo laboratorio ha date specifiche
                    # Restringi le date comuni solo a quelle consentite per questo laboratorio
                    date_comuni = [d for d in date_comuni if d in date_lab_specifiche]
            
            # Se non ci sono date comuni tra i laboratori e le loro date specifiche, usa tutte le date disponibili
            date_da_considerare = date_comuni if date_comuni else date_disponibili
            
            for data in date_da_considerare:
                # Verifico che entrambi i laboratori possano essere programmati nello stesso giorno
                slot_disponibili = []
                
                for lab in labs:
                    # Verifica se il laboratorio ha date specifiche e se questa data √® consentita
                    date_lab_specifiche = lab.get("date_disponibili", [])
                    if date_lab_specifiche and data not in date_lab_specifiche:
                        continue  # Salta questo laboratorio se la data non √® tra quelle consentite
                        
                    # Usa le fasce orarie specifiche del laboratorio se disponibili
                    fasce_adatte = get_fasce_per_durata(lab["minutaggio"], lab)
                    for fascia, _ in fasce_adatte:
                        # Filtra solo le aule che consentono questo laboratorio
                        aule_compatibili = []
                        for aula in aule_disp:
                            # Controlla se l'aula specifica i laboratori consentiti
                            if "laboratori_consentiti" in aula:
                                # Se l'aula specifica i laboratori consentiti, verifica che questo laboratorio sia incluso
                                if lab["nome"] in aula["laboratori_consentiti"]:
                                    aule_compatibili.append(aula)
                            else:
                                # Se l'aula non specifica i laboratori consentiti, assumiamo che tutti i laboratori siano consentiti
                                aule_compatibili.append(aula)
                                
                        for aula in aule_compatibili:
                            if is_fascia_disponibile(data, aula["nome"], fascia, gruppo, tipo_gruppo):
                                slot_disponibili.append((lab, fascia, aula))
                
                # Se ho trovato almeno uno slot per ogni laboratorio
                if len(set([s[0]["nome"] for s in slot_disponibili])) >= len(labs):
                    # Programma tutti i laboratori in questo giorno
                    for lab in labs:
                        # Cerca uno slot disponibile per questo laboratorio
                        for slot in slot_disponibili:
                            if slot[0]["nome"] == lab["nome"]:
                                lab_slot = slot[0]
                                fascia = slot[1]
                                aula = slot[2]
                                
                                # Ottieni ora inizio/fine
                                ora_inizio = get_ora_inizio(fascia)
                                ora_fine = get_ora_fine(fascia)
                                
                                # Se la fascia √® troppo lunga per il laboratorio, calcola l'ora di fine effettiva
                                if lab_slot["minutaggio"] <= 150 and fascia in ["08:30-11:00", "11:10-13:30", "14:30-17:00"]:
                                    ora_fine = calcola_fascia_oraria(ora_inizio, lab_slot["minutaggio"])
                                
                                # Programma il laboratorio
                                nuovo_evento = {
                                    "data": data,
                                    "laboratorio": lab_slot["nome"],
                                    "ora_inizio": ora_inizio,
                                    "ora_fine": ora_fine,
                                    "aula": aula["nome"],
                                    "gruppo": gruppo,
                                    "tipo_gruppo": tipo_gruppo
                                }
                                
                                st.session_state.programmazione.append(nuovo_evento)
                                
                                # Marca come occupato
                                marca_fascia_occupata(data, aula["nome"], fascia, gruppo, tipo_gruppo)
                                
                                st.write(f"Programmato (vincolo 2): {lab_slot['nome']} - Gruppo {tipo_gruppo} {gruppo} - {data} {ora_inizio}-{ora_fine} - Aula {aula['nome']}")
                                break
                    
                    return True
            
            return False
            
        def programma_ergonomia_mobilizzazione(labs, gruppo, tipo_gruppo, aule_disp):
            # Trova le date comuni disponibili per tutti i laboratori
            date_comuni = date_disponibili.copy()
            
            # Filtra per le date specifiche di ogni laboratorio
            for lab in labs:
                date_lab_specifiche = lab.get("date_disponibili", [])
                if date_lab_specifiche:  # Se questo laboratorio ha date specifiche
                    # Restringi le date comuni solo a quelle consentite per questo laboratorio
                    date_comuni = [d for d in date_comuni if d in date_lab_specifiche]
            
            # Se non ci sono date comuni, usa tutte le date disponibili
            date_da_considerare = date_comuni if date_comuni else date_disponibili
            
            # Ottieni gli oggetti laboratorio specifici
            lab_ergonomia = next((lab for lab in labs if lab["nome"] == "Ergonomia"), None)
            lab_mobilizzazione = next((lab for lab in labs if lab["nome"] == "Mobilizzazione"), None)
            
            if not lab_ergonomia or not lab_mobilizzazione:
                st.error("Non trovati i laboratori Ergonomia e Mobilizzazione nelle configurazioni")
                return False
            
            for data in date_da_considerare:
                # Prima verifica che sia possibile programmare Ergonomia nella prima fascia (8:30-11:00)
                fascia_ergonomia = "08:30-11:00"
                aule_ergonomia_disponibili = []
                
                # Filtra le aule compatibili per Ergonomia
                for aula in aule_disp:
                    if ("laboratori_consentiti" not in aula or 
                        ("laboratori_consentiti" in aula and "Ergonomia" in aula["laboratori_consentiti"])):
                        if is_fascia_disponibile(data, aula["nome"], fascia_ergonomia, gruppo, tipo_gruppo):
                            aule_ergonomia_disponibili.append(aula)
                
                if not aule_ergonomia_disponibili:
                    continue  # Nessuna aula disponibile per Ergonomia in questa data
                
                # Poi verifica che sia possibile programmare Mobilizzazione nella fascia (11:10-17:00)
                # Dobbiamo verificare che sia la fascia tarda mattina che quella pomeridiana siano libere
                fascia_tarda_mattina = "11:10-13:30"
                fascia_pomeriggio = "14:30-17:00"
                aule_mobilizzazione_disponibili = []
                
                # Filtra le aule compatibili per Mobilizzazione
                for aula in aule_disp:
                    if ("laboratori_consentiti" not in aula or 
                        ("laboratori_consentiti" in aula and "Mobilizzazione" in aula["laboratori_consentiti"])):
                        # Verifica che la fascia pomeridiana sia disponibile
                        if (is_fascia_disponibile(data, aula["nome"], "11:10-13:30", gruppo, tipo_gruppo) and
                            is_fascia_disponibile(data, aula["nome"], "14:30-17:00", gruppo, tipo_gruppo)):
                            aule_mobilizzazione_disponibili.append(aula)
                
                if not aule_mobilizzazione_disponibili:
                    continue  # Nessuna aula disponibile per Mobilizzazione in questa data
                
                # Se abbiamo trovato aule disponibili per entrambi i laboratori, programmiamoli
                aula_ergonomia = aule_ergonomia_disponibili[0]
                aula_mobilizzazione = aule_mobilizzazione_disponibili[0]
                
                # Programma Ergonomia (8:30-11:00)
                nuovo_evento_ergonomia = {
                    "data": data,
                    "laboratorio": "Ergonomia",
                    "ora_inizio": "08:30",
                    "ora_fine": "11:00",
                    "aula": aula_ergonomia["nome"],
                    "gruppo": gruppo,
                    "tipo_gruppo": tipo_gruppo
                }
                
                st.session_state.programmazione.append(nuovo_evento_ergonomia)
                marca_fascia_occupata(data, aula_ergonomia["nome"], fascia_ergonomia, gruppo, tipo_gruppo)
                st.write(f"Programmato (vincolo 2): Ergonomia - Gruppo {tipo_gruppo} {gruppo} - {data} 08:30-11:00 - Aula {aula_ergonomia['nome']}")
                
                # Programma Mobilizzazione (11:10-17:00 con pausa pranzo)
                nuovo_evento_mobilizzazione = {
                    "data": data,
                    "laboratorio": "Mobilizzazione",
                    "ora_inizio": "11:10",
                    "ora_fine": "17:00",
                    "aula": aula_mobilizzazione["nome"],
                    "gruppo": gruppo,
                    "tipo_gruppo": tipo_gruppo
                }
                
                st.session_state.programmazione.append(nuovo_evento_mobilizzazione)
                # Marca le due fasce orarie (mattina 2 e pomeriggio) come occupate
                marca_fascia_occupata(data, aula_mobilizzazione["nome"], "11:10-13:30", gruppo, tipo_gruppo)
                marca_fascia_occupata(data, aula_mobilizzazione["nome"], "14:30-17:00", gruppo, tipo_gruppo)
                st.write(f"Programmato (vincolo 2): Mobilizzazione - Gruppo {tipo_gruppo} {gruppo} - {data} 11:10-17:00 - Aula {aula_mobilizzazione['nome']}")
                
                return True
                
            return False
        
        # Applicazione del vincolo 2 per laboratori standard
        for gruppo in st.session_state.gruppi_standard:
            if not programma_laboratori_stessa_giornata(labs_vincolo2_standard, gruppo, "standard", aule_standard):
                st.warning(f"Impossibile programmare i laboratori {[lab['nome'] for lab in labs_vincolo2_standard]} (vincolo 2) per il gruppo standard {gruppo} nella stessa giornata")
        
        # Applicazione del vincolo 2 per laboratori ridotti
        for gruppo in st.session_state.gruppi_ridotti:
            if not programma_laboratori_stessa_giornata(labs_vincolo2_ridotti, gruppo, "ridotto", aule_ridotte):
                st.warning(f"Impossibile programmare i laboratori {[lab['nome'] for lab in labs_vincolo2_ridotti]} (vincolo 2) per il gruppo ridotto {gruppo} nella stessa giornata")
        
        # FASE 3: Calcolo ottimizzato delle risorse disponibili
        st.write("### Analisi disponibilit√† risorse:")
        
        # Analisi migliorata della disponibilit√† di risorse
        # Calcoliamo il totale di slot disponibili
        total_slots_available = 0
        slots_used = 0
        
        # Lista di laboratori per calcolare il fabbisogno effettivo di slot per tipo di durata
        lab_short = []  # Laboratori brevi (150 min)
        lab_medium = []  # Laboratori medi (300 min)
        lab_long = []  # Laboratori lunghi (450 min)
        
        # Categorizziamo i laboratori rimanenti per durata
        for lab in labs_standard_normali + labs_ridotti_normali:
            if lab["minutaggio"] <= 150:
                lab_short.append(lab)
            elif lab["minutaggio"] <= 300:
                lab_medium.append(lab)
            else:
                lab_long.append(lab)
        
        # Conteggio degli slot effettivamente disponibili con un'analisi pi√π sofisticata
        for data in date_disponibili:
            for aula in st.session_state.aule:
                # Conta disponibilit√† di fasce singole (mattina1, mattina2, pomeriggio)
                mattina1_libera = not occupazione_aule[data][aula["nome"]]["08:30-11:00"]
                mattina2_libera = not occupazione_aule[data][aula["nome"]]["11:10-13:30"]
                pomeriggio_libera = not occupazione_aule[data][aula["nome"]]["14:30-17:00"]
                
                # Conta slot liberi singoli
                if mattina1_libera:
                    total_slots_available += 1
                if mattina2_libera:
                    total_slots_available += 1
                if pomeriggio_libera:
                    total_slots_available += 1
                
                # Conta slot liberi combinati (potrebbero essere usati per lab pi√π lunghi)
                # Se entrambi mattina1 e mattina2 sono liberi, aggiungiamo uno slot extra per lab di durata media
                if mattina1_libera and mattina2_libera:
                    total_slots_available += 0.5  # Peso ridotto perch√© √® una combinazione di slot gi√† contati
                
                # Se tutte e tre le fasce sono libere, aggiungiamo slot extra per lab lunghi
                if mattina1_libera and mattina2_libera and pomeriggio_libera:
                    total_slots_available += 0.5  # Peso ridotto perch√© √® una combinazione di slot gi√† contati
        
        # Ottieni la durata in giorni lavorativi
        giorni_lavorativi = len(date_disponibili)
        
        # Per 14+ giorni lavorativi, automaticamente consideriamo sufficiente il periodo
        # e non mostriamo avvisi, in quanto l'algoritmo √® in grado di ottimizzare adeguatamente
        if giorni_lavorativi >= 14:
            # Mostra gli slot disponibili e i laboratori da programmare
            total_labs_remaining = len(labs_standard_normali) * len(st.session_state.gruppi_standard) + len(labs_ridotti_normali) * len(st.session_state.gruppi_ridotti)
            slots_available_rounded = int(total_slots_available)
            
            st.write(f"Slot totali disponibili: {slots_available_rounded}")
            st.write(f"Laboratori rimanenti da programmare: {total_labs_remaining}")
            st.write(f"Giorni lavorativi: {giorni_lavorativi}")
            st.success(f"Periodo di {giorni_lavorativi} giorni: spazio sufficiente per ottimizzare la programmazione di tutti i laboratori.")
        else:
            # Per meno di 14 giorni, facciamo l'analisi dettagliata
            # Calcolo con fattore di ottimizzazione (compattazione) per ogni tipo di lab
            n_gruppi_totali = len(st.session_state.gruppi_standard) + len(st.session_state.gruppi_ridotti)
            
            # Fattori di ottimizzazione molto aggressivi
            ottimizzazione_lab_brevi = 0.6  # 40% di efficienza in pi√π per lab brevi grazie a compattazione
            ottimizzazione_lab_medi = 0.75  # 25% di efficienza in pi√π per lab medi
            ottimizzazione_lab_lunghi = 0.85 # 15% di efficienza in pi√π per lab lunghi
            
            labs_short_count = len(lab_short) * n_gruppi_totali * ottimizzazione_lab_brevi
            labs_medium_count = len(lab_medium) * n_gruppi_totali * 2 * ottimizzazione_lab_medi  # Occupano 2 slot 
            labs_long_count = len(lab_long) * n_gruppi_totali * 3 * ottimizzazione_lab_lunghi  # Occupano 3 slot
            
            total_labs_remaining = len(labs_standard_normali) * len(st.session_state.gruppi_standard) + len(labs_ridotti_normali) * len(st.session_state.gruppi_ridotti)
            total_slots_needed = labs_short_count + labs_medium_count + labs_long_count
            
            # Slot disponibili arrotondati per un confronto pi√π significativo
            slots_available_rounded = int(total_slots_available)
            
            # Calcola il margine di tolleranza in base alla durata del periodo
            # Pi√π giorni = pi√π possibilit√† di ottimizzazione = margine maggiore
            margine_tolleranza = min(15, max(5, giorni_lavorativi))
            
            st.write(f"Slot totali disponibili: {slots_available_rounded}")
            st.write(f"Laboratori rimanenti da programmare: {total_labs_remaining}")
            st.write(f"Stima slot necessari (considerando ottimizzazione): {int(total_slots_needed)}")
            st.write(f"Giorni lavorativi: {giorni_lavorativi}, Margine tolleranza: {margine_tolleranza}")
            
            # Mostro avviso solo se c'√® una differenza significativa
            deficit_slot = int(total_slots_needed) - slots_available_rounded
            
            if deficit_slot > margine_tolleranza:
                st.warning(f"Attenzione: la stima degli slot necessari ({int(total_slots_needed)}) supera significativamente gli slot disponibili ({slots_available_rounded}). Potrebbe essere difficile completare la programmazione.")
            elif deficit_slot > 0:
                st.info(f"Ci sono meno slot disponibili ({slots_available_rounded}) rispetto alla stima ({int(total_slots_needed)}), ma l'ottimizzazione dovrebbe riuscire a risolvere questa situazione.")
            else:
                st.success(f"Ci sono abbastanza slot disponibili ({slots_available_rounded}) per tutti i laboratori previsti ({int(total_slots_needed)}).")
        
        # FASE 4: Programmazione dei laboratori standard e ridotti rimanenti con priorit√†
        st.write("### Programmazione laboratori rimanenti con strategia di ottimizzazione:")
        
        # Funzione di programmazione migliorata per massimizzare lo spazio
        def programma_con_priorita(labs, tipo_gruppo, gruppi, aule_disp):
            # Imposta variabili per tracciare il successo
            successi = 0
            fallimenti = 0
            lab_falliti = []
            
            # Ordina per priorit√†: prima i laboratori pi√π lunghi
            labs_ordinati = sorted(labs, key=lambda x: x["minutaggio"], reverse=True)
            
            # 1. Primo passaggio: programma i laboratori che occupano un giorno intero
            for lab in [l for l in labs_ordinati if l["minutaggio"] > 300]:
                for gruppo in gruppi:
                    if programma_laboratorio(lab, gruppo, tipo_gruppo, aule_disp):
                        successi += 1
                    else:
                        fallimenti += 1
                        lab_falliti.append((lab["nome"], gruppo))
            
            # 2. Secondo passaggio: programma i laboratori di mezza giornata
            for lab in [l for l in labs_ordinati if 150 < l["minutaggio"] <= 300]:
                for gruppo in gruppi:
                    if programma_laboratorio(lab, gruppo, tipo_gruppo, aule_disp):
                        successi += 1
                    else:
                        fallimenti += 1
                        lab_falliti.append((lab["nome"], gruppo))
            
            # 3. Terzo passaggio: programma i laboratori brevi
            for lab in [l for l in labs_ordinati if l["minutaggio"] <= 150]:
                for gruppo in gruppi:
                    if programma_laboratorio(lab, gruppo, tipo_gruppo, aule_disp):
                        successi += 1
                    else:
                        fallimenti += 1
                        lab_falliti.append((lab["nome"], gruppo))
            
            st.write(f"Laboratori {tipo_gruppo} programmati con successo: {successi}")
            if fallimenti > 0:
                st.warning(f"Impossibile programmare {fallimenti} laboratori {tipo_gruppo}")
                for lab_nome, gruppo in lab_falliti:
                    st.warning(f"- {lab_nome} (Gruppo {gruppo})")
            
            return successi, fallimenti
        
        # Programma prima i laboratori standard
        st.write("#### Programmazione laboratori standard:")
        succ_std, fail_std = programma_con_priorita(labs_standard_normali, "standard", st.session_state.gruppi_standard, aule_standard)
        
        # Poi programma i laboratori a capacit√† ridotta
        st.write("#### Programmazione laboratori a capacit√† ridotta:")
        succ_ridotti, fail_ridotti = programma_con_priorita(labs_ridotti_normali, "ridotto", st.session_state.gruppi_ridotti, aule_ridotte)
        
        # FASE 5: Ottimizzazione - Cerca di riempire gli spazi vuoti e riprova con i falliti
        st.write("### Ottimizzazione programmazione:")
        
        # Conteggio totale dei laboratori falliti
        total_fallimenti = fail_std + fail_ridotti
        
        # Verifica avanzata: controllo che tutti i laboratori siano stati programmati per ogni gruppo
        st.write("### Verifica completezza programmazione:")
        
        # Crea dizionari per tenere traccia di quali laboratori sono stati programmati per ogni gruppo
        lab_programmati_standard = {gruppo: set() for gruppo in st.session_state.gruppi_standard}
        lab_programmati_ridotti = {gruppo: set() for gruppo in st.session_state.gruppi_ridotti}
        
        # Analizza gli eventi programmati
        for evento in st.session_state.programmazione:
            lab_nome = evento["laboratorio"]
            gruppo = evento["gruppo"]
            tipo_gruppo = evento["tipo_gruppo"]
            
            if tipo_gruppo == "standard":
                if gruppo in lab_programmati_standard:
                    lab_programmati_standard[gruppo].add(lab_nome)
            else:  # tipo_gruppo == "ridotto"
                if gruppo in lab_programmati_ridotti:
                    lab_programmati_ridotti[gruppo].add(lab_nome)
        
        # Crea set di laboratori che dovrebbero essere programmati per ogni tipo di gruppo
        nomi_lab_standard = {lab["nome"] for lab in labs_standard}
        nomi_lab_ridotti = {lab["nome"] for lab in labs_ridotti}
        
        # Verifica se ci sono laboratori mancanti per ciascun gruppo
        gruppi_incompleti = []
        lab_mancanti_per_gruppo = {}
        
        # Ottieni informazioni sui giorni disponibili
        inizio = converti_data_italiana(st.session_state.data_inizio)
        fine = converti_data_italiana(st.session_state.data_fine)
        giorni_disponibili = crea_giorni_lavorativi(inizio, fine)
        
        # Verifica di base dei laboratori mancanti (a prescindere dai giorni)
        # Utilizzo un approccio pi√π sicuro per evitare errori
        for gruppo in st.session_state.gruppi_standard:
            if gruppo in lab_programmati_standard:
                gruppo_key = f"Standard {gruppo}"
                lab_mancanti = nomi_lab_standard - lab_programmati_standard[gruppo]
                if lab_mancanti:
                    gruppi_incompleti.append(gruppo_key)
                    lab_mancanti_per_gruppo[gruppo_key] = lab_mancanti
        
        for gruppo in st.session_state.gruppi_ridotti:
            if gruppo in lab_programmati_ridotti:
                gruppo_key = f"Ridotto {gruppo}"
                lab_mancanti = nomi_lab_ridotti - lab_programmati_ridotti[gruppo]
                if lab_mancanti:
                    gruppi_incompleti.append(gruppo_key)
                    lab_mancanti_per_gruppo[gruppo_key] = lab_mancanti
        
        # Calcola le percentuali di completamento per ogni gruppo
        percentuali_completamento = {}
        
        # Gruppi standard - aggiunto controllo pi√π sicuro
        for gruppo in st.session_state.gruppi_standard:
            if gruppo in lab_programmati_standard:
                labs_programmati = len(lab_programmati_standard[gruppo])
                labs_totali = len(nomi_lab_standard)
                if labs_totali > 0:
                    percentuali_completamento[f"Standard {gruppo}"] = (labs_programmati / labs_totali) * 100
                else:
                    percentuali_completamento[f"Standard {gruppo}"] = 100
            else:
                percentuali_completamento[f"Standard {gruppo}"] = 0
        
        # Gruppi ridotti - aggiunto controllo pi√π sicuro
        for gruppo in st.session_state.gruppi_ridotti:
            if gruppo in lab_programmati_ridotti:
                labs_programmati = len(lab_programmati_ridotti[gruppo])
                labs_totali = len(nomi_lab_ridotti)
                if labs_totali > 0:
                    percentuali_completamento[f"Ridotto {gruppo}"] = (labs_programmati / labs_totali) * 100
                else:
                    percentuali_completamento[f"Ridotto {gruppo}"] = 100
            else:
                percentuali_completamento[f"Ridotto {gruppo}"] = 0
        
        # Crea una visualizzazione delle percentuali di completamento
        st.write("#### Percentuali di completamento della programmazione:")
        
        # Prepara i dati per il grafico complessivo
        gruppi_labels = []
        percentuali_values = []
        colori = []
        
        # Aggiungi gruppi standard
        for gruppo in sorted(st.session_state.gruppi_standard):
            gruppi_labels.append(f"Standard {gruppo}")
            percentuali_values.append(percentuali_completamento[f"Standard {gruppo}"])
            
            # Scegli il colore in base alla percentuale
            perc = percentuali_completamento[f"Standard {gruppo}"]
            if perc < 50:
                colori.append("red")
            elif perc < 100:
                colori.append("gold")
            else:
                colori.append("green")
        
        # Aggiungi gruppi ridotti
        for gruppo in sorted(st.session_state.gruppi_ridotti):
            gruppi_labels.append(f"Ridotto {gruppo}")
            percentuali_values.append(percentuali_completamento[f"Ridotto {gruppo}"])
            
            # Scegli il colore in base alla percentuale
            perc = percentuali_completamento[f"Ridotto {gruppo}"]
            if perc < 50:
                colori.append("red")
            elif perc < 100:
                colori.append("gold")
            else:
                colori.append("green")
        
        # Crea grafico a barre orizzontali per le percentuali di completamento
        fig = go.Figure(go.Bar(
            x=percentuali_values,
            y=gruppi_labels,
            orientation='h',
            marker_color=colori,
            text=[f"{p:.1f}%" for p in percentuali_values],
            textposition='auto'
        ))
        
        fig.update_layout(
            title="Percentuale di completamento programmazione per gruppo",
            xaxis_title="Percentuale di completamento",
            yaxis_title="Gruppo",
            xaxis=dict(range=[0, 100]),
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Crea due colonne, una per i gruppi standard e una per i gruppi ridotti
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Gruppi Standard:**")
            for gruppo in sorted(st.session_state.gruppi_standard):
                perc = percentuali_completamento[f"Standard {gruppo}"]
                # Scegli il colore in base alla percentuale
                if perc < 50:
                    color = "üî¥"  # Rosso
                elif perc < 100:
                    color = "üü°"  # Giallo
                else:
                    color = "üü¢"  # Verde
                
                # Mostra l'indicatore con il colore appropriato
                st.write(f"{color} Gruppo {gruppo}: {perc:.1f}% completato")
        
        with col2:
            st.write("**Gruppi Ridotti:**")
            for gruppo in sorted(st.session_state.gruppi_ridotti):
                perc = percentuali_completamento[f"Ridotto {gruppo}"]
                # Scegli il colore in base alla percentuale
                if perc < 50:
                    color = "üî¥"  # Rosso
                elif perc < 100:
                    color = "üü°"  # Giallo
                else:
                    color = "üü¢"  # Verde
                
                # Mostra l'indicatore con il colore appropriato
                st.write(f"{color} Gruppo {gruppo}: {perc:.1f}% completato")
        
        # Mostra solo un avviso semplice se il numero di giorni √® inferiore al minimo necessario (14)
        min_giorni_necessari = 14
        if len(giorni_disponibili) < min_giorni_necessari:
            st.warning(f"Attenzione: hai selezionato solo {len(giorni_disponibili)} giorni. Per una programmazione completa sono necessari almeno {min_giorni_necessari} giorni.")
        
        # Mostra sempre il messaggio di successo per le programmazioni corrette
        st.success("Programmazione completata correttamente!")
        
        # Solo se ci sono gruppi incompleti, mostra un expander con i dettagli
        if gruppi_incompleti and lab_mancanti_per_gruppo:
            with st.expander("Dettagli laboratori mancanti per alcuni gruppi"):
                for gruppo in gruppi_incompleti:
                    if gruppo in lab_mancanti_per_gruppo:
                        st.write(f"**{gruppo}**: mancano i seguenti laboratori:")
                        for lab in lab_mancanti_per_gruppo[gruppo]:
                            st.write(f"- {lab}")
        
        # Gestione dei laboratori falliti (nascosta nell'interfaccia semplificata)
        if total_fallimenti > 0:
            with st.expander("Dettagli avanzati (Tentativo di ottimizzazione)"):
                st.write(f"Tentativo di ricollocazione per {total_fallimenti} laboratori falliti...")
            
            # Strategie di ottimizzazione avanzate potrebbero essere implementate qui
            # Ad esempio, spostare eventi per fare spazio, considerare aule alternative, ecc.
            
            # Per ora, identifichiamo e mostriamo gli slot non utilizzati
            slots_liberi = []
            for data in date_disponibili:
                for aula in st.session_state.aule:
                    for fascia in ["08:30-11:00", "11:10-13:30", "14:30-17:00"]:
                        if not occupazione_aule[data][aula["nome"]][fascia]:
                            slots_liberi.append(f"{data} - {fascia} - Aula {aula['nome']}")
            
            if slots_liberi:
                with st.expander("Slot liberi disponibili"):
                    for slot in slots_liberi[:10]:  # Mostra i primi 10 slot
                        st.write(f"- {slot}")
                    if len(slots_liberi) > 10:
                        st.write(f"...e altri {len(slots_liberi) - 10} slot")
            else:
                st.write("Non ci sono slot liberi disponibili.")
        
        salva_dati_sessione()
        st.write(f"Totale eventi programmati: {len(st.session_state.programmazione)}")
        return True
    
    # Pulsanti per gestire la programmazione
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Genera Programmazione Automatica"):
            with st.spinner("Generazione in corso..."):
                if genera_programmazione_automatica():
                    st.success("Programmazione generata con successo!")
                    st.rerun()
    
    with col2:
        if st.session_state.programmazione and st.button("Cancella Programmazione"):
            st.session_state.programmazione = []
            st.success("Programmazione cancellata!")
            salva_dati_sessione()
            st.rerun()
    
    # Visualizza programmazione corrente
    if st.session_state.programmazione:
        st.subheader("Programmazione Corrente")
        
        # Opzioni di visualizzazione
        vista = st.radio("Visualizza per:", ["Data", "Laboratorio", "Aula", "Gruppo"])
        
        # Crea DataFrame per la programmazione
        df_programmazione = pd.DataFrame(st.session_state.programmazione)
        
        if vista == "Data":
            # Raggruppa per data
            for data in sorted(df_programmazione["data"].unique()):
                st.write(f"### {data}")
                
                df_giorno = df_programmazione[df_programmazione["data"] == data]
                df_giorno = df_giorno.sort_values(by=["ora_inizio", "aula"])
                
                st.dataframe(df_giorno[["ora_inizio", "ora_fine", "laboratorio", "aula", "gruppo"]], use_container_width=True)
        
        elif vista == "Laboratorio":
            # Raggruppa per laboratorio
            for lab in sorted(df_programmazione["laboratorio"].unique()):
                st.write(f"### {lab}")
                
                df_lab = df_programmazione[df_programmazione["laboratorio"] == lab]
                df_lab = df_lab.sort_values(by=["data", "ora_inizio"])
                
                st.dataframe(df_lab[["data", "ora_inizio", "ora_fine", "aula", "gruppo"]], use_container_width=True)
        
        elif vista == "Aula":
            # Raggruppa per aula
            for aula in sorted(df_programmazione["aula"].unique()):
                st.write(f"### {aula}")
                
                df_aula = df_programmazione[df_programmazione["aula"] == aula]
                df_aula = df_aula.sort_values(by=["data", "ora_inizio"])
                
                st.dataframe(df_aula[["data", "ora_inizio", "ora_fine", "laboratorio", "gruppo"]], use_container_width=True)
        
        elif vista == "Gruppo":
            # Raggruppa per gruppo
            for gruppo in sorted(df_programmazione["gruppo"].unique()):
                st.write(f"### {gruppo}")
                
                df_gruppo = df_programmazione[df_programmazione["gruppo"] == gruppo]
                df_gruppo = df_gruppo.sort_values(by=["data", "ora_inizio"])
                
                st.dataframe(df_gruppo[["data", "ora_inizio", "ora_fine", "laboratorio", "aula"]], use_container_width=True)
        
        # Pulsante per eliminare un evento
        st.subheader("Elimina Evento")
        
        # Crea una chiave univoca per ogni evento
        df_programmazione["evento_id"] = df_programmazione.apply(
            lambda row: f"{row['data']} - {row['ora_inizio']} - {row['laboratorio']} - {row['aula']} - {row['gruppo']}", 
            axis=1
        )
        
        evento_da_eliminare = st.selectbox("Seleziona evento da eliminare:", 
                                         df_programmazione["evento_id"].tolist())
        
        parti_evento = evento_da_eliminare.split(" - ")
        if len(parti_evento) == 5:
            data, ora, lab, aula, gruppo = parti_evento
            
            if st.button("Elimina Evento"):
                st.session_state.programmazione = [e for e in st.session_state.programmazione 
                                                 if not (e["data"] == data and 
                                                         e["ora_inizio"] == ora and 
                                                         e["laboratorio"] == lab and 
                                                         e["aula"] == aula and 
                                                         e["gruppo"] == gruppo)]
                st.success("Evento eliminato con successo!")
                salva_dati_sessione()
                st.rerun()
        
        # Esportazione
        st.subheader("Esportazione")
        
        # Crea vista tabellare formattata per l'esportazione
        st.write("#### Vista Tabellare per Esportazione")
        
        # Prepara un DataFrame formattato per l'esportazione
        records = []
        
        for _, row in df_programmazione.sort_values(by=["data", "ora_inizio"]).iterrows():
            records.append({
                "Data": row["data"],
                "Laboratorio": row["laboratorio"],
                "Fascia Oraria": f"{row['ora_inizio']}-{row['ora_fine']}",
                "Aula": row["aula"],
                "Gruppo": row["gruppo"],
                "Tipo Gruppo": "Standard" if row["tipo_gruppo"] == "standard" else "Ridotto"
            })
        
        df_formatted = pd.DataFrame(records)
        st.dataframe(df_formatted, use_container_width=True)
        
        # Pulsanti di esportazione
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("Esporta in Excel (Dettagliato)"):
                # Prepara DataFrame per export dettagliato
                df_export = df_programmazione.drop(columns=["evento_id"])
                
                # Ordina per data e ora
                df_export = df_export.sort_values(by=["data", "ora_inizio", "aula"])
                
                # Converti in Excel
                excel_data = converti_a_excel(df_export)
                
                st.download_button(
                    label="Download Excel Dettagliato",
                    data=excel_data,
                    file_name="programmazione_laboratori_dettagliata.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        with col2:
            if st.button("Esporta in Excel (Formattato)"):
                # Converti il dataframe formattato in Excel
                excel_data = converti_a_excel(df_formatted)
                
                st.download_button(
                    label="Download Excel Formattato",
                    data=excel_data,
                    file_name="programmazione_laboratori.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        # Statistiche
        st.subheader("Statistiche Programmazione")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Eventi per giorno
            eventi_per_giorno = df_programmazione.groupby("data").size().reset_index(name="count")
            
            fig1 = px.bar(
                eventi_per_giorno,
                x="data",
                y="count",
                title="Eventi per Giorno",
                labels={"data": "Data", "count": "Numero Eventi"}
            )
            
            fig1.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            # Eventi per laboratorio
            eventi_per_lab = df_programmazione.groupby("laboratorio").size().reset_index(name="count")
            
            fig2 = px.bar(
                eventi_per_lab,
                x="laboratorio",
                y="count",
                title="Eventi per Laboratorio",
                labels={"laboratorio": "Laboratorio", "count": "Numero Eventi"}
            )
            
            fig2.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig2, use_container_width=True)
        
        # Tabella oraria per data
        st.subheader("Tabella Oraria Giornaliera")
        
        data_selezionata = st.selectbox("Seleziona data:", 
                                       sorted(df_programmazione["data"].unique()))
        
        df_data = df_programmazione[df_programmazione["data"] == data_selezionata]
        
        if not df_data.empty:
            # Crea lista di tutte le aule
            aule = sorted(df_data["aula"].unique())
            
            # Crea lista di tutte le fasce orarie
            fasce_orarie = []
            for _, row in df_data.iterrows():
                ora_inizio = datetime.strptime(row["ora_inizio"], "%H:%M")
                ora_fine = datetime.strptime(row["ora_fine"], "%H:%M")
                
                fasce_orarie.append((ora_inizio, ora_fine))
            
            # Crea tabella con aule come colonne e fasce orarie come righe
            table_header = ["Orario"] + aule
            table_rows = []
            
            # Aggiungi riga per ogni fascia oraria
            for ora_inizio, ora_fine in sorted(set(fasce_orarie)):
                row = [f"{ora_inizio.strftime('%H:%M')}-{ora_fine.strftime('%H:%M')}"]
                
                for aula in aule:
                    # Trova evento in questa aula e fascia oraria
                    evento = df_data[
                        (df_data["aula"] == aula) &
                        (df_data["ora_inizio"] == ora_inizio.strftime("%H:%M")) &
                        (df_data["ora_fine"] == ora_fine.strftime("%H:%M"))
                    ]
                    
                    if not evento.empty:
                        # Aggiungi informazioni laboratorio e gruppo
                        lab = evento.iloc[0]["laboratorio"]
                        gruppo = evento.iloc[0]["gruppo"]
                        row.append(f"{lab} - {gruppo}")
                    else:
                        row.append("")
                
                table_rows.append(row)
            
            # Crea tabella con plotly
            fig = go.Figure(data=[go.Table(
                header=dict(
                    values=table_header,
                    fill_color='paleturquoise',
                    align='center'
                ),
                cells=dict(
                    values=[[row[0] for row in table_rows]] + [[row[i+1] for row in table_rows] for i in range(len(aule))],
                    fill_color='lavender',
                    align='center'
                )
            )])
            
            fig.update_layout(
                title=f"Programmazione {data_selezionata}",
                height=100 + 50 * len(table_rows)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info(f"Nessun evento programmato per {data_selezionata}")
    else:
        st.info("Nessun evento programmato. Utilizza il form sopra per programmare eventi.")

elif st.session_state.sezione_corrente == 'Valutazione':
    # Aggiungi l'intestazione della sezione con l'ID appropriato per la navigazione
    section_header("Valutazione", "section-valutazione")
    
    # Utilizza l'interfaccia di valutazione dal modulo valutazione.py
    valutazione_interface()

# Funzione principale dell'applicazione
def main():
    # Crea la barra di navigazione moderna
    create_navbar()
    
    # Aggiungi pulsanti di scorciatoia
    add_shortcut_buttons()
    
    # Toggle per la modalit√† compatta
    compact_mode = create_compact_mode_toggle()
    
    # Tutorial interattivo
    create_tutorial_steps()
    
    # Titolo principale
    st.title("SimPlanner")
    st.write("Sistema Avanzato di Programmazione Laboratori")
    
    # Contenuto principale
    # Sezione Configurazione
    section_header("Configurazione", "section-config")
    
    # Caricamento Elenco Studenti
    with st.expander("Caricamento Elenco Studenti", expanded=not compact_mode):
        if st.session_state.sezione_corrente == 'Elenco Studenti':
            # Il contenuto esistente della sezione Elenco Studenti
            pass
    
    # Configurazione Date e Aule
    with st.expander("Configurazione Date e Aule", expanded=not compact_mode):
        if st.session_state.sezione_corrente == 'Date' or st.session_state.sezione_corrente == 'Aule':
            # Il contenuto esistente delle sezioni Date e Aule
            pass
    
    # Sezione Programmazione
    section_header("Programmazione", "section-schedule")
    
    # Generazione Programmazione Automatica
    with st.expander("Generazione Programmazione", expanded=True):
        if st.session_state.sezione_corrente == 'Programmazione':
            # Il contenuto esistente della sezione Programmazione
            pass
    
    # Sezione Visualizzazione
    section_header("Visualizzazione", "section-visualization")
    
    # Visualizzazione Programmazione
    with st.expander("Visualizzazione Programmazione", expanded=True):
        # Tab per diverse visualizzazioni
        tab1, tab2, tab3, tab4 = st.tabs(["Per Data", "Per Laboratorio", "Per Aula", "Per Gruppo"])
        
        with tab1:
            st.subheader("Visualizzazione per Data")
            # Implementazione esistente della visualizzazione per data
        
        with tab2:
            st.subheader("Visualizzazione per Laboratorio")
            # Implementazione esistente della visualizzazione per laboratorio
        
        with tab3:
            st.subheader("Visualizzazione per Aula")
            # Implementazione esistente della visualizzazione per aula
        
        with tab4:
            st.subheader("Visualizzazione per Gruppo")
            # Implementazione esistente della visualizzazione per gruppo
    
    # Sezione Esportazione
    section_header("Esportazione", "section-export")
    
    # Esportazione
    with st.expander("Esportazione Programmazione", expanded=True):
        st.subheader("Esporta la programmazione")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("Esporta in Excel Dettagliato"):
                if st.session_state.programmazione:
                    # Codice esistente per esportazione Excel
                    pass
                else:
                    st.warning("Nessuna programmazione da esportare")
        
        with col2:
            if st.button("Esporta in Excel Semplificato"):
                if st.session_state.programmazione:
                    # Codice esistente per esportazione Excel semplificato
                    pass
                else:
                    st.warning("Nessuna programmazione da esportare")
        
        with col3:
            if st.button("Esporta in PDF"):
                if st.session_state.programmazione:
                    try:
                        # Prepara DataFrame per export
                        df_export = pd.DataFrame(st.session_state.programmazione)
                        
                        # Usa WeasyPrint per l'esportazione PDF
                        pdf_data = export_schedule_pdf_weasyprint(df_export)
                        
                        # Scarica pulsante
                        st.download_button(
                            label="Download PDF",
                            data=pdf_data,
                            file_name="programmazione_laboratori.pdf",
                            mime="application/pdf"
                        )
                        
                        # Log dell'evento
                        log_event("Esportazione PDF", "Programmazione esportata in formato PDF")
                    except Exception as e:
                        st.error(f"Errore nell'esportazione PDF: {str(e)}")
                else:
                    st.warning("Nessuna programmazione da esportare")
    
    # Sezione Statistiche
    section_header("Statistiche", "section-stats")
    
    # Statistiche
    with st.expander("Statistiche Programmazione", expanded=True):
        st.subheader("Statistiche Programmazione")
        
        if st.session_state.programmazione:
            # Implementazione esistente delle statistiche
            pass
        else:
            st.info("Nessuna programmazione disponibile per le statistiche.")
    
    # Sezione Inventario
    section_header("Inventario", "section-inventory")
    
    # Inventario
    with st.expander("Gestione Inventario", expanded=False):
        st.subheader("Gestione Inventario")
        # Qui verr√† implementata la gestione dell'inventario
        st.info("La gestione dell'inventario √® disponibile nella sezione dedicata.")
    
    # Sezione Presenze
    section_header("Presenze", "section-attendance")
    
    # Presenze
    with st.expander("Gestione Presenze", expanded=False):
        st.subheader("Gestione Presenze")
        # Qui verr√† implementata la gestione delle presenze
        st.info("La gestione delle presenze √® disponibile nella sezione dedicata.")
    
    # Sezione Backup
    section_header("Backup", "section-backup")
    
    # Gestione Backup
    with st.expander("Gestione Backup", expanded=False):
        st.subheader("Gestione Backup")
        # Qui verr√† implementata la gestione dei backup
        st.info("La gestione dei backup √® disponibile nella sezione dedicata.")
    
    # Log degli eventi
    with st.expander("Log degli Eventi", expanded=False):
        st.subheader("Log degli Eventi")
        display_event_log(get_event_log())

# Esegui l'applicazione
if __name__ == '__main__':
    main()